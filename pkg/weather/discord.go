package weather

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/bwmarrin/discordgo"
	"github.com/lefes/curly-broccoli/pkg/logging"
	"github.com/sirupsen/logrus"
)

var cityShortcuts = map[string]string{
	"–º—Å–∫": "Moscow",
	"—Å–ø–±": "Saint Petersburg",
	"–µ–∫–±": "Yekaterinburg",
	"–Ω—Å–∫": "Novosibirsk",
	"–∫—Ä–¥": "Krasnodar",
	"—Å–æ—á": "Sochi",
}

var logger *logrus.Entry

func InitWeatherLogger() {
	logger = logging.GetLogger("weather")

}

func sendHelpMessage(session *discordgo.Session, message *discordgo.MessageCreate) error {
	shortcutsDescription := ""
	for shortcut, city := range cityShortcuts {
		shortcutsDescription += fmt.Sprintf("`%s`: %s\n", shortcut, city)
	}

	embed := &discordgo.MessageEmbed{
		Title:       "Weather Command Help",
		Description: "–ö–æ–º–∞–Ω–¥–∞ `!weather` –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ.\n\n**–í–∞–∂–Ω–æ:** –ù–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.",
		Color:       0x3498db, // Blue
		Fields: []*discordgo.MessageEmbedField{
			{
				Name:  "üîπ `!weather <city>`",
				Value: "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ.",
			},
			{
				Name:  "üîπ `!weather <city> <days>`",
				Value: "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (–º–∞–∫—Å–∏—É–º 7).",
			},
			{
				Name:  "üîπ –®–æ—Ä—Ç–∫–∞—Ç—ã –≥–æ—Ä–æ–¥–æ–≤",
				Value: shortcutsDescription,
			},
		},
		Footer: &discordgo.MessageEmbedFooter{
			Text: "–ü—Ä–∏–º–µ—Ä: !weather Moscow\n–ü—Ä–∏–º–µ—Ä: !weather Moscow 3",
		},
	}

	_, err := session.ChannelMessageSendEmbed(message.ChannelID, embed)
	if err != nil {
		logger.Error("Error sending help message:", err)
		return err
	}
	return nil
}

func sendForecastWeatherMessage(session *discordgo.Session, message *discordgo.MessageCreate, weather *WeatherResponse) error {
	fields := []*discordgo.MessageEmbedField{}
	for _, day := range weather.Days {
		fields = append(fields, &discordgo.MessageEmbedField{
			Name: day.Datetime,
			Value: fmt.Sprintf(
				"üå°Ô∏è **Max:** %.1f¬∞C\n"+
					"üå°Ô∏è **Min:** %.1f¬∞C\n"+
					"üå§Ô∏è **Condition:** %s\n"+
					"üåÖ **Sunrise:** %s\n"+
					"üåá **Sunset:** %s",
				day.TempMax, day.TempMin, day.Condition, day.SunRise, day.SunSet),
			Inline: false,
		})
	}

	embed := &discordgo.MessageEmbed{
		Title:       fmt.Sprintf("Weather Forecast for %s", weather.ResolvedAddress),
		Description: "Here's the weather forecast for the next days:",
		Color:       0x1abc9c,
		Fields:      fields,
		Timestamp:   time.Now().Format(time.RFC3339),
	}

	_, err := session.ChannelMessageSendEmbed(message.ChannelID, embed)
	if err != nil {
		logger.Error("Error sending forecast weather message:", err)
		return err
	}
	return nil
}

func sendCurrentWeatherMessage(session *discordgo.Session, message *discordgo.MessageCreate, weather *WeatherResponse) error {
	embed := &discordgo.MessageEmbed{
		Title:       "Current Weather",
		Description: fmt.Sprintf("Here's the current weather for **%s**", weather.ResolvedAddress),
		Color:       0x3498db,
		Fields: []*discordgo.MessageEmbedField{
			{
				Name:   "üìç Location",
				Value:  weather.ResolvedAddress,
				Inline: true,
			},
			{
				Name:   "üå°Ô∏è Temperature",
				Value:  fmt.Sprintf("**%.1f¬∞C** (Max: %.1f¬∞C, Min: %.1f¬∞C)", weather.CurrentConditions.Temp, weather.Days[0].TempMax, weather.Days[0].TempMin),
				Inline: true,
			},
			{
				Name:   "üå§Ô∏è Condition",
				Value:  weather.CurrentConditions.Condition,
				Inline: true,
			},
			{
				Name:   "üìÖ Date",
				Value:  weather.Days[0].Datetime,
				Inline: true,
			},
			{
				Name:   "üåÖ Sunrise",
				Value:  weather.Days[0].SunRise,
				Inline: true,
			},
			{
				Name:   "üåá Sunset",
				Value:  weather.Days[0].SunSet,
				Inline: true,
			},
		},
		Timestamp: time.Now().Format(time.RFC3339),
	}

	_, err := session.ChannelMessageSendEmbed(message.ChannelID, embed)
	if err != nil {
		logger.Error("Error sending current weather message:", err)
		return err
	}
	return nil
}


func resolveShortCut(input string) string {
	normalizedInput := strings.ToLower(input)

	if fullName, exists := cityShortcuts[normalizedInput]; exists {
		return fullName
	}

	return input
}

func HandleWeatherMessage(client Client, session *discordgo.Session, message *discordgo.MessageCreate, cmdMatches []string) error {
	if cmdMatches[2] == "" {
		return sendHelpMessage(session, message)
	}

	city := resolveShortCut(cmdMatches[2])
	days := 0
	if cmdMatches[3] != "" {
		parsedDays, err := strconv.Atoi(cmdMatches[3])
		if err != nil {
			session.ChannelMessageSend(message.ChannelID, "–û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
			return err
		}
		days = parsedDays
	}
	if days == 0 {
		weather, err := client.CurrentWeather(city)
		if err != nil {
			session.ChannelMessageSend(message.ChannelID, "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É.")
			return err
		}
		err = sendCurrentWeatherMessage(session, message, weather)
		if err != nil {
			session.ChannelMessageSend(message.ChannelID, "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–æ–π.")
			return err
		}
		return nil
	}

	weather, err := client.ForecastWeather(city, days)
	if err != nil {
		session.ChannelMessageSend(message.ChannelID, "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã.")
		return err
	}
	err = sendForecastWeatherMessage(session, message, weather)
	if err != nil {
		session.ChannelMessageSend(message.ChannelID, "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –ø–æ–≥–æ–¥—ã.")
		return err
	}

	return nil
}
