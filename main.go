package main

import (
	"fmt"
	rand "math/rand/v2"
	"os"
	"regexp"
	"strconv"
	"strings"
	"time"

	"github.com/bwmarrin/discordgo"
	"github.com/joho/godotenv"
	"github.com/lefes/curly-broccoli/internal/domain"
	"github.com/lefes/curly-broccoli/internal/handlers"
	domain_handler "github.com/lefes/curly-broccoli/internal/handlers/domain"
	service_handlers "github.com/lefes/curly-broccoli/internal/handlers/service"
	"github.com/lefes/curly-broccoli/internal/logging"
	"github.com/lefes/curly-broccoli/internal/repository"
	"github.com/lefes/curly-broccoli/internal/services"
	"github.com/lefes/curly-broccoli/internal/transport/http/weatherapi"
	"github.com/lefes/curly-broccoli/jokes"
	"github.com/lefes/curly-broccoli/quotes"
	"github.com/sirupsen/logrus"
)

func handleRaceCommand(s *discordgo.Session, m *discordgo.MessageCreate) {
	if raceInProgress {
		s.ChannelMessageSend(m.ChannelID, "–ì–æ–Ω–∫–∞ —É–∂–µ –∏–¥–µ—Ç! –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –≥–æ–Ω–∫–∏.")
		return
	}

	raceInProgress = true
	s.ChannelMessageSend(m.ChannelID, "–ó–∞–µ–∑–¥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –ù–∞–ø–∏—à–∏—Ç–µ !–≥–æ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è. –£ –≤–∞—Å –µ—Å—Ç—å 1 –º–∏–Ω—É—Ç–∞.")

	time.AfterFunc(1*time.Minute, func() {
		startRace(s, m)
	})
}

func handleJoinRaceCommand(s *discordgo.Session, m *discordgo.MessageCreate) {
	if !raceInProgress {
		s.ChannelMessageSend(m.ChannelID, "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≥–æ–Ω–∫–∏. –ù–∞–ø–∏—à–∏—Ç–µ !–≥–æ–Ω–∫–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é.")
		return
	}

	raceMutex.Lock()
	defer raceMutex.Unlock()

	if _, exists := raceParticipants[m.Author.ID]; exists {
		s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("<@%s>, —Ç—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ –∑–∞–µ–∑–¥–µ!", m.Author.ID))
		return
	}

	emoji := raceEmojis[rand.IntN(len(raceEmojis))]
	raceParticipants[m.Author.ID] = emoji
	s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("<@%s> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥–æ–Ω–∫–µ –∫–∞–∫ %s!", m.Author.ID, emoji))
}

func startRace(s *discordgo.Session, m *discordgo.MessageCreate) {
	if len(raceParticipants) < 2 {
		s.ChannelMessageSend(m.ChannelID, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≥–æ–Ω–∫–∏. –ì–æ–Ω–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
		raceInProgress = false
		raceParticipants = make(map[string]string)
		return
	}

	s.ChannelMessageSend(m.ChannelID, "–ì–æ–Ω–∫–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥! üèÅ")
	time.Sleep(30 * time.Second)

	raceTrack := make(map[string]int)
	trackLength := 20

	for id := range raceParticipants {
		raceTrack[id] = 0
	}

	raceMessageContent := buildRaceMessage(raceTrack, raceParticipants, trackLength)
	raceMessage, err := s.ChannelMessageSend(m.ChannelID, raceMessageContent)
	if err != nil {
		fmt.Println("error sending race message:", err)
		return
	}

	winner := ""
	for winner == "" {
		time.Sleep(1 * time.Second)

		for id := range raceParticipants {
			raceTrack[id] += rand.IntN(3)
			if raceTrack[id] >= trackLength {
				raceTrack[id] = trackLength
				winner = id
				break
			}
		}

		updatedRaceMessageContent := buildRaceMessage(raceTrack, raceParticipants, trackLength)
		_, err := s.ChannelMessageEdit(m.ChannelID, raceMessage.ID, updatedRaceMessageContent)
		if err != nil {
			fmt.Println("error editing race message:", err)
			return
		}
	}

	winnerMessage := fmt.Sprintf("üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –≥–æ–Ω–∫–∏: <@%s> %s! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ", winner, raceParticipants[winner])
	_, err = s.ChannelMessageSend(m.ChannelID, winnerMessage)
	if err != nil {
		fmt.Println("error sending winner message:", err)
	}

	raceInProgress = false
	raceParticipants = make(map[string]string)
}

func buildRaceMessage(raceTrack map[string]int, raceParticipants map[string]string, trackLength int) string {
	raceMessage := "üèÅ –ì–æ–Ω–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ: üèÅ\n\n"
	longestName := 0

	for name := range raceParticipants {
		if len(name) >= longestName {
			longestName = len(name)
		}
	}

	for id, emoji := range raceParticipants {
		track := strings.Repeat("-", raceTrack[id]) + emoji + strings.Repeat("-", trackLength-raceTrack[id])
		raceMessage += fmt.Sprintf("<@%s>: ", id) + strings.Repeat(" ", longestName-len(id)) + fmt.Sprintf("%s\n", track)
	}

	return raceMessage
}

func handleBeerCommand(s *discordgo.Session, m *discordgo.MessageCreate) {
	args := strings.Split(m.Content, " ")
	if len(args) != 2 {
		s.ChannelMessageSend(m.ChannelID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !–ø–∏–≤–æ <—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 40>")
		return
	}

	amount, err := strconv.Atoi(args[1])
	if err != nil || amount < 1 || amount > 40 {
		s.ChannelMessageSend(m.ChannelID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 40.")
		return
	}

	chance := (amount * 3)
	roll := rand.IntN(120) + 1
	fmt.Printf("Date: %s, Author: %s, Amount: %d, Chance: %d, Roll: %d\n", time.Now().Format("2006-01-02 15:04:05"), m.Author.Username, amount, chance, roll)

	successMessages := []string{
		fmt.Sprintf("<@%s> —Å–º–æ–≥ –æ—Å–∏–ª–∏—Ç—å %d –ª–∏—Ç—Ä–æ–≤ –ø–∏–≤–∞! üç∫", m.Author.ID, amount),
		fmt.Sprintf("<@%s> —É—Å–ø–µ—à–Ω–æ —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å %d –ª–∏—Ç—Ä–∞–º–∏! –≠—Ç–æ –¥–æ—Å—Ç–æ–π–Ω–æ —É–≤–∞–∂–µ–Ω–∏—è! üçª", m.Author.ID, amount),
		fmt.Sprintf("<@%s> –≤—ã–ø–∏–ª %d –ª–∏—Ç—Ä–æ–≤, –ø–∏–≤–Ω–æ–π –º–æ–Ω—Å—Ç—Ä –Ω–∞ —Å–≤–æ–±–æ–¥–µ! üçªü¶π", m.Author.ID, amount),
		fmt.Sprintf("<@%s> –∑–∞–ª–ø–æ–º –ø–æ–≥–ª–æ—Ç–∏–ª %d –ª–∏—Ç—Ä–æ–≤ –∏ –≤—ã–≥–ª—è–¥–∏—Ç, –∫–∞–∫ —á–µ–º–ø–∏–æ–Ω! üèÜ", m.Author.ID, amount),
		fmt.Sprintf("<@%s> –≤—ã–ø–∏–ª %d –ª–∏—Ç—Ä–æ–≤ –ø–∏–≤–∞ –∏ –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º —Å–≤–µ—Ä—à–µ–Ω–∏—è–º! üçªüöÄ", m.Author.ID, amount),
		fmt.Sprintf("<@%s> —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å %d –ª–∏—Ç—Ä–∞–º–∏ –ø–∏–≤–∞! –ù–µ –ø–ª–æ—Ö–æ! üç∫", m.Author.ID, amount),
		fmt.Sprintf("<@%s> –≤—ã–ø–∏–ª %d –ª–∏—Ç—Ä–æ–≤ –ø–∏–≤–∞ –∏ –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –ø–æ–¥–≤–∏–≥–∞–º! üçªüöÄ", m.Author.ID, amount),
	}

	failureMessages := []string{
		fmt.Sprintf("<@%s> –Ω–µ —Å–º–æ–≥ –æ—Å–∏–ª–∏—Ç—å –¥–∞–∂–µ %d –ª–∏—Ç—Ä–æ–≤ –ø–∏–≤–∞ –∏ –æ–±–ª–µ–≤–∞–ª –≤–µ—Å—å –ø–æ–ª! –ö—Ç–æ —ç—Ç–æ —É–±–∏—Ä–∞—Ç—å –±—É–¥–µ—Ç?! ü§¢ü§Æ", m.Author.ID, roll/3),
		fmt.Sprintf("<@%s> –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–∏—Ç—å %d –ª–∏—Ç—Ä, –Ω–æ –ø–æ—Ç–µ—Ä–ø–µ–ª –Ω–µ—É–¥–∞—á—É –∏ —Å–≤–∞–ª–∏–ª—Å—è –ø–æ–¥ —Å—Ç–æ–ª! üòµ", m.Author.ID, roll/3),
		fmt.Sprintf("<@%s> –ø—Ä–æ–∏–≥—Ä–∞–ª –±–æ—Ä—å–±—É –Ω–∞ %d –ª–∏—Ç—Ä–∞—Ö –ø–∏–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –±–∞–Ω –Ω–∞ %s! üò¥", m.Author.ID, roll/3, getMuteDuration(amount)),
		fmt.Sprintf("<@%s> –≤–∑—è–ª –Ω–∞ —Å–µ–±—è —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ! %d –ª–∏—Ç—Ä –ø–∏–≤–∞ —É–∂–µ –æ–∫–∞–∑–∞–ª—Å—è –≤—ã—à–µ –µ–≥–æ —Å–∏–ª! ü•¥", m.Author.ID, roll/3),
		fmt.Sprintf("<@%s> –±—ã–ª —Å–ª–∏—à–∫–æ–º —É–≤–µ—Ä–µ–Ω –≤ —Å–µ–±–µ –∏ –ø–µ—Ä–µ–ø–∏–ª. %d –ª–∏—Ç—Ä–æ–≤ ‚Äî –Ω–µ —à—É—Ç–∫–∞! ü§¢", m.Author.ID, roll/3),
		fmt.Sprintf("<@%s> —Å–≤–∞–ª–∏–ª—Å—è –ø–æ–¥ –≤–µ—Å–æ–º %d –ª–∏—Ç—Ä–æ–≤ –ø–∏–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —Ç–∞–π–º-–∞—É—Ç! üòµ", m.Author.ID, roll/3),
	}

	if roll >= chance {
		successMessage := successMessages[rand.IntN(len(successMessages))]
		s.ChannelMessageSend(m.ChannelID, successMessage)

		if amount == 40 {
			s.ChannelMessageSend(m.ChannelID, "https://media.giphy.com/media/gPbhyNB9Vpde0/giphy.gif?cid=790b7611u68bncsm51wuk8e8whzjalqm9r0gi2mpqxaiqpr3&ep=v1_gifs_search&rid=giphy.gif&ct=g")
			time.Sleep(1 * time.Second)
			s.ChannelMessageSend(m.ChannelID, "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ!!!!!! 40 –ª–∏—Ç—Ä–æ–≤!!!!!!!! –¢—ã, –Ω–∞–≤–µ—Ä–Ω–æ–µ, –∏–∑ –ø–∏–≤–Ω–æ–≥–æ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞! üçªüëë")
			time.Sleep(5 * time.Second)
			s.ChannelMessageSend(m.ChannelID, "https://media.giphy.com/media/Zw3oBUuOlDJ3W/giphy.gif?cid=790b7611rwi3azyed54indak41tqabn2pga0fbqr5da2z44d&ep=v1_gifs_search&rid=giphy.gif&ct=g")
			return
		}

		if rand.IntN(100) < 50 { // 50% —à–∞–Ω—Å –ø–æ–∫–∞–∑–∞—Ç—å GIF
			gif := gifs[rand.IntN(len(gifs))]
			s.ChannelMessageSend(m.ChannelID, gif)
		}

	} else {
		failureMessage := failureMessages[rand.IntN(len(failureMessages))]
		muteDuration := getMuteDuration(amount)
		muteUntil := time.Now().Add(muteDuration)

		err = s.GuildMemberTimeout(m.GuildID, m.Author.ID, &muteUntil)
		if err != nil {
			fmt.Println("Error muting member:", err)
		}

		s.ChannelMessageSend(m.ChannelID, failureMessage)

		if rand.IntN(100) < 50 { // 50% —à–∞–Ω—Å –ø–æ–∫–∞–∑–∞—Ç—å GIF
			gif := gifs[rand.IntN(len(gifs))]
			s.ChannelMessageSend(m.ChannelID, gif)
		}
	}
}

func getMuteDuration(amount int) time.Duration {
	switch {
	case amount >= 40:
		return 10 * time.Minute
	case amount >= 30:
		return 5 * time.Minute
	case amount >= 20:
		return 3 * time.Minute
	case amount >= 10:
		return 2 * time.Minute
	default:
		return 1 * time.Minute
	}
}

func poll(session *discordgo.Session, m *discordgo.MessageCreate) {
	users, err := session.GuildMembers(m.GuildID, "", 300)
	if err != nil {
		fmt.Println("error getting users,", err)
		return
	}

	rand.Shuffle(len(users), func(i, j int) { users[i], users[j] = users[j], users[i] })
	users = users[:3]

	poll := &discordgo.MessageEmbed{
		Title: "–ö—Ç–æ —Å–µ–≥–æ–¥–Ω—è –ø–∏—Å—å–∫–∞??? ü§îü§îü§î",
		Color: 0x00ff00,
		Fields: []*discordgo.MessageEmbedField{
			{
				Name:   "1",
				Value:  getNick(users[0]),
				Inline: true,
			},
			{
				Name:   "2",
				Value:  getNick(users[1]),
				Inline: true,
			},
			{
				Name:   "3",
				Value:  getNick(users[2]),
				Inline: true,
			},
		},
	}

	pollMessage, err := session.ChannelMessageSendEmbed(m.ChannelID, poll)
	if err != nil {
		fmt.Println("error sending poll,", err)
		return
	}

	reactions := []string{"1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£"}

	for _, v := range reactions {
		err := session.MessageReactionAdd(pollMessage.ChannelID, pollMessage.ID, v)
		if err != nil {
			fmt.Println("error adding reaction,", err)
			return
		}
	}

	time.Sleep(30 * time.Minute)

	pollResults, err := session.ChannelMessage(pollMessage.ChannelID, pollMessage.ID)
	if err != nil {
		fmt.Println("error getting poll results,", err)
		return
	}

	var mostVotedOption string
	var mostVotedOptionCount int
	for _, v := range pollResults.Reactions {
		if v.Count > mostVotedOptionCount {
			mostVotedOption = v.Emoji.Name
			mostVotedOptionCount = v.Count
		}
	}

	// Get the winner
	var winner *discordgo.Member
	switch mostVotedOption {
	case "1Ô∏è‚É£":
		winner = users[0]
	case "2Ô∏è‚É£":
		winner = users[1]
	case "3Ô∏è‚É£":
		winner = users[2]
	}

	_, err = session.ChannelMessageSend(m.ChannelID, fmt.Sprintf("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, <@%s>, —Ç—ã —Å–µ–≥–æ–¥–Ω—è –ø–∏—Å—å–∫–∞! üéâüéâüéâ", winner.User.ID))
	if err != nil {
		fmt.Println("error congratulating the winner,", err)
	}

}

func init() {
	err := godotenv.Load(".env")
	if err != nil {
		fmt.Println("Error loading .env file")
	}

	Token = os.Getenv("TOKEN")
	if Token == "" {
		panic("You need to set the TOKEN environment variable.")
	}

	/*  weatherApiKey = os.Getenv("WEATHER_API_KEY") */
	/* if weatherApiKey == "" { */
	/* panic("You need to set the WEATHER_API_KEY environment variable.") */
	/* } */

	dbPath := os.Getenv("DB_PATH")
	if dbPath == "" {
		panic("You need to set the DB_PATH environment variable.")
	}
}

func getNick(member *discordgo.Member) string {
	if member.Nick == "" {
		return member.User.Username
	}
	return member.Nick
}

func piskaMessage(users []string) string {
	var message string
	message += "ü§îü§îü§î"
	for _, user := range users {
		// #nosec G404 -- This is a false positive
		piskaProc := rand.IntN(101)
		switch {
		case piskaProc == 0:
			message += fmt.Sprintf("\n–ò–∑–≤–∏–Ω–∏, <@%s>, –Ω–æ —Ç—ã —Å–æ–≤—Å–µ–º –Ω–µ –ø–∏—Å—å–∫–∞ (0%%), –ø—Ä–∏—Ö–æ–¥–∏ –∫–æ–≥–¥–∞ –æ–ø–∏—Å—é–Ω–µ–µ—à—å", user)
		case piskaProc == 100:
			message += fmt.Sprintf("\n<@%s>, —Ç—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–∏—Å—å–∫–∞ –Ω–∞ –í–°–ï 100%%", user)
		case piskaProc >= 50:
			message += fmt.Sprintf("\n<@%s> –ø–∏—Å—å–∫–∞ –Ω–∞ %d%%, –º–æ–ª–æ–¥–µ—Ü, —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!", user, piskaProc)
		default:
			message += fmt.Sprintf("\n<@%s> –ø–∏—Å—å–∫–∞ –Ω–∞ %d%%, –Ω–æ –Ω—É–∂–Ω–æ –µ—â–µ –≤—ã—Ä–∞—Å—Ç–∏", user, piskaProc)
		}
	}
	return message
}

func penisCommand() string {
	size := rand.IntN(30) + 1
	shaft := strings.Repeat("=", size)
	penis := fmt.Sprintf("8%s>", shaft)

	var message string
	switch size {
	case 1:
		message = "–û–±–ª–∞–¥–∞—Ç–µ–ª—å –º–∏–∫—Ä–æ—Å–∫–æ–ø–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç—Ä—É—á–∫–∞! –ù–µ –≥—Ä—É—Å—Ç–∏, –±—Ä–æ, –∑–∞—Ç–æ —Ç—ã –∫–æ—Ä–æ–ª—å –∫–ª–∏—Ç–æ—Ä–∞!"
	case 30:
		message = "–°–≤—è—Ç—ã–µ —É–≥–æ–¥–Ω–∏–∫–∏! –£ —Ç–µ–±—è —Ç–∞–º –±–∞–æ–±–∞–± –≤—ã—Ä–æ—Å? –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ç–µ–ø–µ—Ä—å —Ç—ã –≥–ª–∞–≤–Ω—ã–π –∫–∞–ª–∏–±—Ä —ç—Å–∫–∞–¥—Ä—ã!"
	default:
		message = fmt.Sprintf("–†–∞–∑–º–µ—Ä: %d —Å–º", size)
	}

	return fmt.Sprintf("```\n%s\n```\n%s", penis, message)
}

func boobsCommand() string {
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –≥—Ä—É–¥–∏ –æ—Ç 0 –¥–æ 20
	size := rand.IntN(21)

	// –°—Ç—Ä–æ–∏–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–¥–∏
	leftBoob := "(" + strings.Repeat(" ", size/4) + "." + strings.Repeat(" ", size/4) + ")"
	rightBoob := "(" + strings.Repeat(" ", size/4) + "." + strings.Repeat(" ", size/4) + ")"
	boobs := leftBoob + " " + rightBoob

	var message string
	switch size {
	case 0:
		message = "–ù–æ–ª—å? –ù–µ –±–µ–¥–∞! –ì–ª–∞–≤–Ω–æ–µ ‚Äî –¥—É—à–µ–≤–Ω–∞—è –≥–ª—É–±–∏–Ω–∞."
	case 20:
		message = "–≠—Ç–æ –Ω–µ –≥—Ä—É–¥—å, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–æ—é–¥–æ–æ—Å—Ç—Ä—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–æ–±–ª–∞–∑–Ω–∞!"
	case 1, 2:
		message = "–ù—É, —ç—Ç–æ –ø–æ—á—Ç–∏ –Ω–µ–∑–∞–º–µ—Ç–Ω–æ, –Ω–æ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –ø–æ–¥—Å—É–Ω—É—Ç—å –Ω–æ—Å–æ–∫!"
	case 3, 4, 5:
		message = "–ú–∞–ª –¥–∞ —É–¥–∞–ª! –ö—Ç–æ-—Ç–æ —è–≤–Ω–æ —Ñ–∞–Ω–∞—Ç —è–ø–æ–Ω—Å–∫–∏—Ö –∞–Ω–∏–º–µ."
	case 6, 7, 8:
		message = "–ü–æ–∫–∞ —á—Ç–æ —Å–∫—Ä–æ–º–Ω–æ, –Ω–æ –≤—Å—ë –≤–ø–µ—Ä–µ–¥–∏. –ö—Å—Ç–∞—Ç–∏, push-up –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–º–µ–Ω—è–ª!"
	case 9, 10, 11:
		message = "–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä ‚Äî –∏–¥–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å! –ó–∞–≤–∏–¥—É—é —Ç–æ–º—É, –∫—Ç–æ –±—É–¥–µ—Ç —Å —ç—Ç–∏–º —Ä–∞–±–æ—Ç–∞—Ç—å."
	case 12, 13, 14:
		message = "–û–≥–æ, —ç—Ç–æ —É–∂–µ —á—Ç–æ-—Ç–æ —Å–µ—Ä—å–µ–∑–Ω–æ–µ. –¢–µ–±–µ —Ç–æ—á–Ω–æ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ —Ç–æ–ø–æ–≤ –∏ –º–µ–Ω—å—à–µ gravity."
	case 15, 16, 17:
		message = "–í–æ—Ç —ç—Ç–æ –¥–∞, –ø—ã—à–Ω—ã–µ —Ñ–æ—Ä–º—ã! –° —Ç–∞–∫–æ–π –≥—Ä—É–¥—å—é –º–æ–∂–Ω–æ —Å–º–µ–ª–æ –∏–¥—Ç–∏ –Ω–∞ –∫–∞—Å—Ç–∏–Ω–≥ –∫ Victoria's Secret."
	case 18, 19:
		message = "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–º–µ—Ä ‚Äî —ç—Ç–æ —Ü–µ–ª–æ–µ —Å–æ–±—ã—Ç–∏–µ! –°–∫–æ—Ä–æ —Ç–µ–±–µ –Ω—É–∂–µ–Ω –±—É–¥–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª."
	default:
		message = fmt.Sprintf("–†–∞–∑–º–µ—Ä: %d ", size)
	}

	return fmt.Sprintf("```\n%s\n```\n%s", boobs, message)
}

func gayMessage(s *discordgo.Session, m *discordgo.MessageCreate, user string) {
	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≥–µ–π—Å—Ç–≤–∞
	gayProc := rand.IntN(101)
	var result string
	var rainbowCount int

	switch {
	case gayProc == 0:
		result = fmt.Sprintf("<@%s>, —É —Ç–µ–±—è –ø–æ–∫–∞ 0%% GaY—Å—Ç–≤–∞. –ù–µ —Å–¥–∞–≤–∞–π—Å—è! ü•∫", user)
		rainbowCount = 1
	case gayProc == 100:
		result = fmt.Sprintf("<@%s>, —Ç—ã –ø—Ä–æ—Å—Ç–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ! 400%% GaY—Å—Ç–≤–∞! üåà‚ú®ü¶Ñüíñüåü", user)
		rainbowCount = 20
	case gayProc >= 61:
		result = fmt.Sprintf("<@%s>, —É —Ç–µ–±—è %d%% GaY—Å—Ç–≤–∞! –î–µ—Ä–∂–∏—Å—å, —Ä–∞–¥—É–∂–Ω—ã–π –≤–æ–∏–Ω! üíÉ‚ú®", user, gayProc)
		rainbowCount = 15
	case gayProc >= 21:
		result = fmt.Sprintf("<@%s>, —É —Ç–µ–±—è %d%% GaY—Å—Ç–≤–∞. –ü–æ–ø—Ä–æ–±—É–π —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å –ø–æ–¥ Lady Gaga! üíÉüé∂", user, gayProc)
		rainbowCount = 10
	default:
		result = fmt.Sprintf("<@%s>, —É —Ç–µ–±—è %d%% GaY—Å—Ç–≤–∞. –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –±–ª–µ—Å—Ç–æ–∫ –∏ —Ä–∞–¥—É–≥! ‚ú®üåà", user, gayProc)
		rainbowCount = 5
	}

	messageContent := fmt.Sprint(strings.Repeat("üåà", rainbowCount), "\n", result)

	sentMessage, err := s.ChannelMessageSend(m.ChannelID, messageContent)
	if err != nil {
		fmt.Println("error sending message:", err)
		return
	}

	var reactions []string
	switch {
	case gayProc == 0:
		reactions = []string{}
	case gayProc == 100:
		reactions = []string{"üåà", "‚ú®", "ü¶Ñ", "üíñ"}
	case gayProc >= 61:
		reactions = []string{"üåà", "‚ú®", "ü¶Ñ"}
	case gayProc >= 21:
		reactions = []string{"üåà", "‚ú®"}
	default:
		reactions = []string{"üåà"}
	}

	for _, emoji := range reactions {
		err := s.MessageReactionAdd(m.ChannelID, sentMessage.ID, emoji)
		if err != nil {
			fmt.Println("error adding reaction:", err)
		}
	}
}

func syncUsers(service *services.Services, logger *logrus.Entry) {
	discordUsers := make(map[string]bool)
	dbUsers := make(map[string]bool)

	members, err := service.Discord.GetAllUsers(GuildID)
	if err != nil {
		logger.Error("Error getting all users from Discord:", err)
		return
	}

	users, err := service.User.GetAllUsers()
	if err != nil {
		logger.Error("Error getting all users from database:", err)
		return
	}

	for _, member := range members.Members {
		discordUsers[member.User.ID] = true
	}

	for _, user := range users {
		dbUsers[user.DiscordID] = true
	}

	for _, member := range members.Members {
		if !dbUsers[member.User.ID] {
			err := service.User.CreateUser(&domain.User{
				DiscordID:     member.User.ID,
				Username:      member.User.Username,
				RoleID:        1,
				Points:        0,
				Respect:       0,
				DailyMessages: 0,
			})
			if err != nil {
				logger.Error("Error adding user to database:", err)
			} else {
				logger.Info("Added user to database:", member.User.ID)
			}
		}
	}

	for userID := range dbUsers {
		if !discordUsers[userID] {
			err := service.User.DeleteUser(userID)
			if err != nil {
				logger.Error("Error deleting user from database:", err)
			} else {
				logger.Info("Deleted user from database:", userID)
			}
		}
	}
}

func main() {

	logging.InitLogger()
	logger := logging.GetLogger("main")
	wLogger := logging.GetLogger("weather")
	stLogger := logging.GetLogger("storage")

	session, err := discordgo.New("Bot " + Token)
	if err != nil {
		logger.Error("Error creating Discord session:", err)
		return
	}
	db, err := storage.InitDB(dbPath)
	if err != nil {
		stLogger.Error("Error initializing database:", err)
		return
	}
	defer db.Close()

	weatherApiBaseUrl := "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline"
	weatherCommandRe := regexp.MustCompile(`^!(weather|–ø–æ–≥–æ–¥–∞)(?:\s+([\p{L}\s]+))?(?:\s+(\d+))?$`)

	// ????? Or maybe new client creation should be within weather service ??
	weatherClient := weatherapi.NewClient(weatherApiKey, weatherApiBaseUrl)

	quote := quotes.New()

	session.Identify.Intents = discordgo.IntentsGuildMessages

	repo := repository.NewRepository(db, session)
	service := services.NewServices(repo, weatherClient)

	messageHandler := service_handlers.NewMessageHandler()
	messageHandler.MessageHandler.AddHandler(func(msg *domain.Message, ctx *domain_handler.HandlerContext) bool {
		return handlers.HandlePoints(msg, ctx.Services, ctx.Session)
	})

	session.AddHandler(func(s *discordgo.Session, m *discordgo.MessageCreate) {

		syncUsers(service, logger)

		ctx := domain_handler.NewHandlerContext(service, s)
		msg := &domain.Message{
			Author:    m.Author.ID,
			Username:  m.Author.Username,
			Content:   m.Content,
			ChannelID: m.ChannelID,
			Raw:       m,
		}

		messageHandler.MessageHandler.HandleMessage(msg, ctx)

		weatherMathes := weatherCommandRe.FindStringSubmatch(m.Content)
		if len(weatherMathes) > 0 {
			err := weather.HandleWeatherMessage(*weatherClient, s, m, weatherMathes)
			if err != nil {
				wLogger.Error("Error handling weather message:", err)
			}
		}

		if m.Author.ID == s.State.User.ID {
			return
		}
		morning := false
		for _, v := range morningMessages {
			if strings.Contains(strings.ToLower(m.Content), v) {
				morning = true
			}
		}

		spoki := false
		for _, v := range spokiMessages {
			if strings.Contains(strings.ToLower(m.Content), v) {
				spoki = true
			}
		}

		if m.Content == "!–≥–æ–Ω–∫–∞" {
			handleRaceCommand(s, m)
		} else if m.Content == "!–≥–æ" {
			handleJoinRaceCommand(s, m)
		} else if strings.HasPrefix(m.Content, "!–ø–∏–≤–æ") {
			handleBeerCommand(s, m)
		}

		if morning {
			emoji, err := session.GuildEmoji(m.GuildID, "1016631674106294353")
			if err != nil {
				emoji = &discordgo.Emoji{
					Name: "ü´†",
				}
			}
			err = session.MessageReactionAdd(m.ChannelID, m.ID, emoji.APIName())
			if err != nil {
				logger.Error("error reacting to message,", err)
			}
		}

		if spoki {
			emoji, err := session.GuildEmoji(m.GuildID, "1016631826338566144")
			if err != nil {
				emoji = &discordgo.Emoji{
					Name: "üò¥",
				}
			}
			err = session.MessageReactionAdd(m.ChannelID, m.ID, emoji.APIName())
			if err != nil {
				logger.Error("error reacting to message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "–ª–µ–≥–∏–æ–Ω") {
			for _, v := range legionEmojis {
				err := s.MessageReactionAdd(m.ChannelID, m.ID, v)
				time.Sleep(100 * time.Millisecond)
				if err != nil {
					logger.Error("error reacting to message,", err)
				}
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "–∫–æ–≤–µ–Ω") || strings.Contains(strings.ToLower(m.Content), "—Å–µ—Å—Ç—Ä—ã") || strings.Contains(strings.ToLower(m.Content), "—Å—ë—Å—Ç—Ä—ã") {
			for _, v := range covenEmojis {
				err := s.MessageReactionAdd(m.ChannelID, m.ID, v)
				time.Sleep(100 * time.Millisecond)
				if err != nil {
					logger.Error("error reacting to message,", err)
				}
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "—Å–ø–∞—Å–∏–±–æ") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–≠—Ç–æ —Ç–µ–±–µ —Å–ø–∞—Å–∏–±–æ! üòéüòéüòé", m.Reference())
			if err != nil {
				logger.Error("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "–±–æ–±—Ä") || strings.Contains(strings.ToLower(m.Content), "–±–æ–±–µ—Ä") || strings.Contains(strings.ToLower(m.Content), "–∫—É—Ä–≤–∞") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "Kurwa b√≥br. Ja pierdolƒô, Jakie bydlƒô jebane ü¶´ü¶´ü¶´", m.Reference())
			if err != nil {
				logger.Error("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "–ø—Ä–∏–≤–µ—Ç") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–ü—Ä–∏–≤–µ—Ç!", m.Reference())
			if err != nil {
				logger.Error("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "–ø–∏—Ñ") && strings.ContainsAny(strings.ToLower(m.Content), "–ø–∞—Ñ") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–ü–∏—Ñ-–ø–∞—Ñ!üî´üî´üî´", m.Reference())
			if err != nil {
				logger.Error("error sending message,", err)
			}
		} else if strings.Contains(strings.ToLower(m.Content), "pif") && strings.ContainsAny(strings.ToLower(m.Content), "paf") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "Pif-paf!üî´üî´üî´", m.Reference())
			if err != nil {
				logger.Error("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "–∞–ª–∫–∞—à") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–≠–π –º–∞–ª—å—á–∏–∫, –¥–∞–≤–∞–π –æ–±–º–µ–Ω,—è –∂–µ –≤–∏–∂—É —á—Ç–æ —Ç—ã –∞–ª–∫–∞—à (c) –ß–∞–π–æ–∫", m.Reference())
			if err != nil {
				logger.Error("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "–¥–µ–¥ –∏–Ω—Å–∞–π–¥") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–ì–ª–∏—Å—Ç—ã –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ –ø–æ–º–µ—Ä–ª–∏?", m.Reference())
			if err != nil {
				logger.Error("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "—è –≥–µ–π") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–Ø —Ç–æ–∂–µ!", m.Reference())
			if err != nil {
				logger.Error("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "—è –ª–µ—Å–±–∏—è–Ω–∫–∞") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–Ø —Ç–æ–∂–µ!", m.Reference())
			if err != nil {
				logger.Error("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "—è –±–∏") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–Ø —Ç–æ–∂–µ!", m.Reference())
			if err != nil {
				logger.Error("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "—è –Ω–∞—Ç—É—Ä–∞–ª") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–Ø –∏–Ω–æ–≥–¥–∞ —Ç–æ–∂–µ!", m.Reference())
			if err != nil {
				logger.Error("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–î–µ–Ω—å —Ç—è–∂–µ–ª—ã–π üòµ‚Äçüí´", m.Reference())
			if err != nil {
				logger.Error("error sending message,", err)
			}
		}

		for _, v := range sickMessages {
			if strings.Contains(strings.ToLower(m.Content), v) {
				_, err := s.ChannelMessageSendReply(m.ChannelID, "–°–∫–æ—Ä–µ–µ –≤—ã–∑–¥–æ—Ä–∞–≤–ª–∏–≤–∞–π –∏ –±–æ–ª—å—à–µ –Ω–µ –±–æ–ª–µ–π! üòç", m.Reference())
				if err != nil {
					logger.Error("error sending message,", err)
				}
			}
		}

		for _, v := range phasmaMessages {
			if strings.Contains(strings.ToLower(m.Content), v) {
				err := s.MessageReactionAdd(m.ChannelID, m.ID, "üëª")
				if err != nil {
					logger.Error("error reacting to message,", err)
				}
			}
		}

		if strings.HasPrefix(strings.ToLower(m.Content), "!–ø–µ–Ω–∏—Å") {
			user := m.Author.ID
			if len(m.Mentions) != 0 {
				member, err := s.GuildMember(m.GuildID, m.Mentions[0].ID)
				if err == nil {
					user = member.User.ID
				}
			}

			response := penisCommand()
			_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("<@%s>\n%s", user, response), m.Reference())
			if err != nil {
				logger.Error("error sending message,", err)
			}
		}

		if strings.HasPrefix(strings.ToLower(m.Content), "!–±—É–±—Å") {
			// –í—ã–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —É–ø–æ–º—è–Ω—É—Ç–æ–≥–æ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞
			user := m.Author.ID
			if len(m.Mentions) != 0 {
				member, err := s.GuildMember(m.GuildID, m.Mentions[0].ID)
				if err == nil {
					user = member.User.ID
				}
			}

			response := boobsCommand()
			_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("<@%s>\n%s", user, response), m.Reference())
			if err != nil {
				logger.Error("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "–ø–æ–ª—á–∞—Å–∞") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–ø–æ–ª—á–∞—Å–∞, –ø–æ–ª—á–∞—Å–∞ - –Ω–µ –≤–æ–ø—Ä–æ—Å. –ù–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—á–∞—Å–∞, –ø–æ–ª—á–∞—Å–∞ (c) –ß–∞–π–æ–∫", m.Reference())
			if err != nil {
				logger.Error("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "–∫–µ—Ä–∞–º–∏–∫–∞") {
			customEmoji := "<:PotFriend:1271815662695743590>"
			response := fmt.Sprintf("–≤–Ω–µ–∑–∞–ø–Ω–∞—è %s –ø–µ—Ä–µ–∫–ª–∏—á–∫–∞ %s –µ–±—É—á–∏—Ö %s –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∏—Ö %s –∏–∑–¥–µ–ª–∏–π %s –≤–Ω–µ–∑–∞–ø–Ω–∞—è %s –ø–µ—Ä–µ–∫–ª–∏—á–∫–∞ %s –µ–±—É—á–∏—Ö %s –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∏—Ö %s –∏–∑–¥–µ–ª–∏–π %s",
				customEmoji, customEmoji, customEmoji, customEmoji, customEmoji,
				customEmoji, customEmoji, customEmoji, customEmoji, customEmoji)
			_, err := s.ChannelMessageSendReply(m.ChannelID, response, m.Reference())
			if err != nil {
				logger.Error("error sending message,", err)
			}
		}

		if m.Content == "!–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ" {
			go poll(s, m)
		}

		if strings.Contains(strings.ToLower(m.Content), "!quote") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, quote.GetRandom(), m.Reference())
			if err != nil {
				logger.Error("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "!academia") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, quote.GetRandomAcademia(), m.Reference())
			if err != nil {
				logger.Error("error sending message,", err)
			}
		}

		if strings.HasPrefix(strings.ToLower(m.Content), "!–º–µ–¥–≤–µ–¥—å") {
			user := m.Author.ID
			if len(m.Mentions) != 0 {
				//#nosec G404 -- This is a false positive
				if rand.IntN(10) == 0 {
					_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("<@%s>, –∫–∞–∂–µ—Ç—Å—è –º–µ–¥–≤–µ–¥—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∑–∞–≤–∞–ª–∏—Ç —Ç–µ–±—è üêªüêªüêª", user), m.Reference())
					if err != nil {
						logger.Error("error sending message,", err)
					}
					return
				}
				member, err := s.GuildMember(m.GuildID, m.Mentions[0].ID)
				if err == nil {
					user = member.User.ID
				}
			}

			//#nosec G404 -- This is a false positive
			medvedProc := rand.IntN(101)
			_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("<@%s>, –∑–∞–≤–∞–ª–∏—à—å –º–µ–¥–≤–µ–¥—è —Å %d%% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é üêª", user, medvedProc), m.Reference())
			if err != nil {
				logger.Error("error sending message,", err)
			}
		}

		if strings.HasPrefix(strings.ToLower(m.Content), "!—Ä–æ–ª–ª") || strings.HasPrefix(strings.ToLower(m.Content), "!d20") {
			user := m.Author.ID
			//#nosec G404 -- This is a false positive
			roll := rand.IntN(20) + 1
			_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("<@%s>, —Ç—ã –≤—ã–∫–∏–Ω—É–ª %d", user, roll), m.Reference())
			if err != nil {
				logger.Error("error sending message,", err)
			}
		}

		if strings.HasPrefix(strings.ToLower(m.Content), "!–ø–∏—Å—å–∫–∞") {
			user := m.Author.ID
			if len(m.Mentions) != 0 {
				//#nosec G404 -- This is a false positive
				if rand.IntN(10) == 0 {
					_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("<@%s>, –∞ –≤–æ—Ç –∏ –Ω–µ—Ç, –ø–∏—Å—å–∫–∞ —ç—Ç–æ —Ç—ã!!!", user), m.Reference())
					if err != nil {
						logger.Error("error sending message,", err)
					}
					return
				}
				member, err := s.GuildMember(m.GuildID, m.Mentions[0].ID)
				if err == nil {
					user = member.User.ID
				}
			}

			//#nosec G404 -- This is a false positive
			piskaProc := rand.IntN(101)

			if piskaProc == 100 {
				_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("<@%s>, —Ç—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–∏—Å—å–∫–∞ –Ω–∞ –í–°–ï 100%%", user), m.Reference())
				if err != nil {
					logger.Error("error sending message,", err)
				}
				return
			}

			if piskaProc == 0 {
				_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("–ò–∑–≤–∏–Ω–∏, <@%s>, –Ω–æ —Ç—ã —Å–æ–≤—Å–µ–º –Ω–µ –ø–∏—Å—å–∫–∞ (0%%), –ø—Ä–∏—Ö–æ–¥–∏ –∫–æ–≥–¥–∞ –æ–ø–∏—Å—é–Ω–µ–µ—à—å", user), m.Reference())
				if err != nil {
					logger.Error("error sending message,", err)
				}
				return
			}

			//#nosec G404 -- This is a false positive
			if rand.IntN(2) == 0 && piskaProc > 50 {
				//#nosec G404 -- This is a false positive
				_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("<@%s> –Ω–∞—Å—Ç–æ—è—â–∞—è –ø–∏—Å—å–∫–∞ –Ω–∞ %d%%, –≤–æ—Ç —Ç–µ–±–µ —Ü–∏—Ç–∞—Ç–∞: %s", user, piskaProc, quotesPublic[rand.IntN(len(quotesPublic))]), m.Reference())
				if err != nil {
					logger.Error("error sending message,", err)
				}
				return
			}

			if piskaProc > 50 {
				_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("<@%s> –ø–∏—Å—å–∫–∞ –Ω–∞ %d%%, –º–æ–ª–æ–¥–µ—Ü, —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!", user, piskaProc), m.Reference())
				if err != nil {
					logger.Error("error sending message,", err)
				}
				return
			}

			//#nosec G404 -- This is a false positive
			_, err = s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("<@%s> –ø–∏—Å—å–∫–∞ –Ω–∞ %d%%, –Ω–æ –Ω—É–∂–Ω–æ –µ—â–µ –≤—ã—Ä–∞—Å—Ç–∏!", user, piskaProc), m.Reference())
			if err != nil {
				logger.Error("error sending message,", err)
			}
		}

		if strings.HasPrefix(strings.ToLower(m.Content), "!–≥–µ–π") {
			var userID string

			if len(m.Mentions) > 0 {
				userID = m.Mentions[0].ID
			} else {
				_, err := s.ChannelMessageSend(m.ChannelID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–ø–æ–º—è–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–π—Å—Ç–≤–∞!")
				if err != nil {
					logger.Error("error sending message:", err)
				}
				return
			}

			if rand.IntN(10) == 0 {
				userID = m.Author.ID
				_, err := s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("<@%s>, –∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç—ã, –º–æ—è –≥–æ–ª—É–±–∞—è –ª—É–Ω–∞???!!!", userID))
				if err != nil {
					logger.Error("error sending message:", err)
				}
			}

			gayMessage(s, m, userID)
		}

		if strings.HasPrefix(strings.ToLower(m.Content), "!–ø–∏—Å—å–∫–∏") {
			user := m.Author.ID
			users := make([]string, 0)
			if len(m.Mentions) != 0 {
				// nosec G404 -- This is a false positive
				if rand.IntN(10) == 0 {
					_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("<@%s>, –∞ –≤–æ—Ç –∏ –Ω–µ—Ç, –ø–∏—Å—å–∫–∞ —ç—Ç–æ —Ç—ã!!!", user), m.Reference())
					if err != nil {
						logger.Error("error sending message,", err)
					}
					return
				}
				for _, mention := range m.Mentions {
					member, err := s.GuildMember(m.GuildID, mention.ID)
					if err == nil {
						users = append(users, member.User.ID)
					}
				}
			}

			_, err := s.ChannelMessageSendReply(m.ChannelID, piskaMessage(users), m.Reference())
			if err != nil {
				logger.Error("error sending message,", err)
			}
			return

		}

		if strings.HasPrefix(strings.ToLower(m.Content), "!–∞–Ω–µ–∫–¥–æ—Ç") {
			joke, err := jokes.GetJoke()
			if err != nil {
				logger.Error("error getting joke,", err)
				return
			}
			_, err = s.ChannelMessageSendReply(m.ChannelID, joke, m.Reference())
			if err != nil {
				logger.Error("error sending message,", err)
			}
		}

		for _, v := range potterMessages {
			if strings.Contains(strings.ToLower(m.Content), v) {
				err := s.MessageReactionAdd(m.ChannelID, m.ID, "üßô")
				if err != nil {
					logger.Error("error reacting message,", err)
				}
			}
		}

		for _, v := range valorantMessages {
			if strings.Contains(strings.ToLower(m.Content), v) {
				err := s.MessageReactionAdd(m.ChannelID, m.ID, "üî•")
				if err != nil {
					logger.Error("error reacting message,", err)
				}
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "—è –ø–∏—Å—é–Ω") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–Ø —Ç–æ–∂–µ –ø–∏—Å—é–Ω!!!", m.Reference())
			if err != nil {
				logger.Error("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "—è –ø–∏—Å—å–∫–∞") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–Ø —Ç–æ–∂–µ –ø–∏—Å—å–∫–∞!!!", m.Reference())
			if err != nil {
				logger.Error("error sending message,", err)
			}
		}

		if strings.HasPrefix(strings.ToLower(m.Content), "!—à–∞—Ä") {
			//#nosec G404 -- This is a false positive
			_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("–ú–æ–π –æ—Ç–≤–µ—Ç: %s", magicBallMessages[rand.IntN(len(magicBallMessages))]), m.Reference())
			if err != nil {
				logger.Error("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "–¥–µ–º–æ–Ω") {
			err := s.MessageReactionAdd(m.ChannelID, m.ID, "üëπ")
			if err != nil {
				logger.Error("error reacting message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "–∫–ª–æ—É–Ω") {
			err := s.MessageReactionAdd(m.ChannelID, m.ID, "ü§°")
			if err != nil {
				logger.Error("error reacting message,", err)
			}
		}

	})

	err = session.Open()
	if err != nil {
		logger.Error("error opening connection,", err)
		return
	}

	logger.Info("Bot is now running.  Press CTRL-C to exit.")
	<-make(chan struct{})

}
