package main

import (
	"flag"
	"fmt"
	"math/rand"
	"os"
	"strings"
	"time"
	"context"
	"log"
	"os/signal"
	"syscall"

	"github.com/bwmarrin/discordgo"
	"github.com/joho/godotenv"
	"github.com/lefes/curly-broccoli/jokes"
	"github.com/lefes/curly-broccoli/quotes"
	"github.com/diamondburned/arikawa/v3/gateway"
	"github.com/diamondburned/arikawa/v3/session"
	"github.com/joho/godotenv"
)

var (
	Token string = ""
	botID      string
	counter    int
	targetUser string
	clownEmoji string // –ò–º—è —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–º–∞–π–ª–∞ –∫–ª–æ—É–Ω–∞
)

func poll(session *discordgo.Session, m *discordgo.MessageCreate) {
	// Randomly create a poll with 3 options in the channel
	// Take 3 person from the channel
	users, err := session.GuildMembers(m.GuildID, "", 300)
	if err != nil {
		fmt.Println("error getting users,", err)
		return
	}

	// Get 3 random users
	rand.Shuffle(len(users), func(i, j int) { users[i], users[j] = users[j], users[i] })
	users = users[:3]

	// Create a poll
	poll := &discordgo.MessageEmbed{
		Title: "–ö—Ç–æ —Å–µ–≥–æ–¥–Ω—è –ø–∏—Å—å–∫–∞??? ü§îü§îü§î",
		Color: 0x00ff00,
		Fields: []*discordgo.MessageEmbedField{
			&discordgo.MessageEmbedField{
				Name:   "1",
				Value:  getNick(users[0]),
				Inline: true,
			},
			&discordgo.MessageEmbedField{
				Name:   "2",
				Value:  getNick(users[1]),
				Inline: true,
			},
			&discordgo.MessageEmbedField{
				Name:   "3",
				Value:  getNick(users[2]),
				Inline: true,
			},
		},
	}

	// Send the poll
	pollMessage, err := session.ChannelMessageSendEmbed(m.ChannelID, poll)
	if err != nil {
		fmt.Println("error sending poll,", err)
		return
	}

	reactions := []string{"1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£"}
	// Add reactions to the poll

	for _, v := range reactions {
		err := session.MessageReactionAdd(pollMessage.ChannelID, pollMessage.ID, v)
		if err != nil {
			fmt.Println("error adding reaction,", err)
			return
		}
	}

	// Wait for 2 hours
	time.Sleep(30 * time.Minute)

	// Get the poll results
	pollResults, err := session.ChannelMessage(pollMessage.ChannelID, pollMessage.ID)
	if err != nil {
		fmt.Println("error getting poll results,", err)
		return
	}

	// Get the most voted option
	var mostVotedOption string
	var mostVotedOptionCount int
	for _, v := range pollResults.Reactions {
		if v.Count > mostVotedOptionCount {
			mostVotedOption = v.Emoji.Name
			mostVotedOptionCount = v.Count
		}
	}

	// Get the winner
	var winner *discordgo.Member
	switch mostVotedOption {
	case "1Ô∏è‚É£":
		winner = users[0]
	case "2Ô∏è‚É£":
		winner = users[1]
	case "3Ô∏è‚É£":
		winner = users[2]
	}

	// Congratulate the winner
	_, err = session.ChannelMessageSend(m.ChannelID, fmt.Sprintf("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, <@%s>, —Ç—ã —Å–µ–≥–æ–¥–Ω—è –ø–∏—Å—å–∫–∞! üéâüéâüéâ", winner.User.ID))
	if err != nil {
		fmt.Println("error congratulating the winner,", err)
	}

}

func init() {
	// Load dotenv
	err := godotenv.Load()
	if err != nil {
		fmt.Println("Error loading .env file")
	}

	if Token == "" {
		flag.StringVar(&Token, "token", "", "token")
		flag.Parse()
	}
	if Token == "" {
		Token = os.Getenv("TOKEN")
		if Token == "" {
			panic("You need to input the token.")
		}
	}
	rand.Seed(time.Now().UnixNano())

}

func getNick(member *discordgo.Member) string {
	if member.Nick == "" {
		return member.User.Username
	}
	return member.Nick
}

func piskaMessage(users []string) string {
	var message string
	rand.Seed(time.Now().UnixNano())
	message += "ü§îü§îü§î"
	for _, user := range users {
		// #nosec G404 -- This is a false positive
		piskaProc := rand.Intn(101)
		if piskaProc == 0 {
			message += fmt.Sprintf("\n–ò–∑–≤–∏–Ω–∏, <@%s>, –Ω–æ —Ç—ã —Å–æ–≤—Å–µ–º –Ω–µ –ø–∏—Å—å–∫–∞ (0%%), –ø—Ä–∏—Ö–æ–¥–∏ –∫–æ–≥–¥–∞ –æ–ø–∏—Å—é–Ω–µ–µ—à—å", user)
		} else if piskaProc == 100 {
			message += fmt.Sprintf("\n<@%s>, —Ç—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–∏—Å—å–∫–∞ –Ω–∞ –í–°–ï 100%%", user)
		} else if piskaProc >= 50 {
			message += fmt.Sprintf("\n<@%s> –ø–∏—Å—å–∫–∞ –Ω–∞ %d%%, –º–æ–ª–æ–¥–µ—Ü, —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!", user, piskaProc)
		} else {
			message += fmt.Sprintf("\n<@%s> –ø–∏—Å—å–∫–∞ –Ω–∞ %d%%, –Ω–æ –Ω—É–∂–Ω–æ –µ—â–µ –≤—ã—Ä–∞—Å—Ç–∏", user, piskaProc)
		}
	}
	return message
}

func messageCreate(s *discordgo.Session, m *discordgo.MessageCreate) {
	if m.Author.ID == botID {
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–æ "—É–º–µ—Ä"
	if m.Author.ID == targetUser && strings.Contains(strings.ToLower(m.Content), "—É–º–µ—Ä" ) {
		counter++
		response := fmt.Sprintf("–°–≤–æ–ª–æ—á–∏, –æ–Ω–∏ —É–±–∏–ª–∏ @%s %d —Ä–∞–∑(–∞) üíÄüî´", counter)
		message, err := s.ChannelMessageSend(m.ChannelID, response)
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
			return
		}

		// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –≤ –≤–∏–¥–µ —Å–º–∞–π–ª–∞ –∫–ª–æ—É–Ω–∞
		err = s.MessageReactionAdd(message.ChannelID, message.ID, clownEmoji)
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏:", err)
			return
		}
	}

func main() {
	// Create a new Discord session using the provided bot token.
	session, err := discordgo.New("Bot " + Token)
	if err != nil {
		fmt.Println("error creating Discord session,", err)
		return
	}

	// Create interface for quotes
	quote := quotes.New()

	targetUser = "850043154207604736"

	clownEmoji = "ü§°" // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω–æ–µ –≤–∞–º –∏–º—è —ç–º–æ–¥–∑–∏

	morningMessages := []string{
		"–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ",
		"–¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞",
		"–¥–æ–±—Ä—ã–π –¥–µ–Ω—å",
		"–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä",
		"–¥–æ–±—Ä–æ–π –Ω–æ—á–∏",
		"—É—Ç—Ä–µ—á–∫–æ",
		"–Ω–æ—á–µ—á–∫–æ",
		"–ø—Ä–æ—Å–Ω—É–ª",
		"–æ—Ç–∫—Ä—ã–ª –≥–ª–∞–∑–∞",
	}

	quotesPublic := []string{
		"¬´–ß–µ–º —É–º–Ω–µ–µ –ø–∏—Å—å–∫–∞, —Ç–µ–º –ª–µ–≥—á–µ –æ–Ω –ø—Ä–∏–∑–Ω–∞–µ—Ç —Å–µ–±—è –¥—É—Ä–∞–∫–æ–º¬ª. –ê–ª—å–±–µ—Ä—Ç –≠–π–Ω—à—Ç–µ–π–Ω",
		"¬´–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—à–∏–±–∞–µ—Ç—Å—è —Ç–æ—Ç, –∫—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—Å—å–∫–∞¬ª. –¢–µ–æ–¥–æ—Ä –†—É–∑–≤–µ–ª—å—Ç",
		"¬´–í—Å–µ –º—ã —Å–æ–≤–µ—Ä—à–∞–µ–º –æ—à–∏–±–∫–∏. –ù–æ –µ—Å–ª–∏ –º—ã –Ω–µ —Å–æ–≤–µ—Ä—à–∞–µ–º –æ—à–∏–±–æ–∫, —Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –º—ã –Ω–µ –ø–∏—Å—å–∫–∏¬ª. –î–∂–æ–Ω –§. –ö–µ–Ω–Ω–µ–¥–∏",
		"¬´–°–∞–º—ã–π –±–æ–ª—å—à–æ–π –ø–∏—Å—å–∫ ‚Äî —ç—Ç–æ –Ω–µ –ø–∏—Å—å–∫. –í –∂–∏–∑–Ω–∏ —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –ø–∏—Å—å–∫ ‚Äî —ç—Ç–æ –Ω–µ –ø–∏—Å—å–∫¬ª. –î–∂–µ–π–º—Å –ö—ç–º–µ—Ä–æ–Ω",
		"¬´–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ —Å–≤–æ—é –ø–∏—Å—å–∫—É –≤ —ç—Ç–æ—Ç –º–∏—Ä. –ò–Ω–∞—á–µ –∑–∞—á–µ–º –º—ã –∑–¥–µ—Å—å?¬ª –°—Ç–∏–≤ –î–∂–æ–±—Å",
		"¬´–ú–æ–¥–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç, –ø–∏—Å—å–∫–∞ –æ—Å—Ç–∞—ë—Ç—Å—è¬ª. –ö–æ–∫–æ –®–∞–Ω–µ–ª—å",
		"¬´–ï—Å–ª–∏ –ø–∏—Å—å–∫–∞ –Ω–µ –Ω–∞—à—ë–ª, –∑–∞ —á—Ç–æ –º–æ–∂–µ—Ç —É–º–µ—Ä–µ—Ç—å, –æ–Ω –Ω–µ —Å–ø–æ—Å–æ–±–µ–Ω –∂–∏—Ç—å¬ª. –ú–∞—Ä—Ç–∏–Ω –õ—é—Ç–µ—Ä –ö–∏–Ω–≥",
		"¬´–°–∞–º—ã–π –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± —É–∑–Ω–∞—Ç—å, —á—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å, ‚Äî —ç—Ç–æ —Å–∫–∞–∑–∞—Ç—å –æ —Ç–æ–º, —á—Ç–æ —Ç—ã –ø–∏—Å—å–∫–∞¬ª. –≠—Ä–∏—Ö –§—Ä–æ–º–º",
		"¬´–ü–∏—Å—å–∫–∞ –∑–∞–≤–æ–¥–∏—Ç —Å–µ—Ä–¥—Ü–∞ —Ç–∞–∫, —á—Ç–æ –ø–ª—è—à–µ—Ç –∏ –ø–æ—ë—Ç —Ç–µ–ª–æ. –ê¬†–µ—Å—Ç—å –ø–∏—Å—å–∫–∞, —Å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—Ç—Å—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤—Å–µ–º, —á—Ç–æ –Ω–∞–±–æ–ª–µ–ª–æ¬ª. –î–∂–æ–Ω –õ–µ–Ω–Ω–æ–Ω",
		"¬´–ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –ø—Ä–∏—á–∏–Ω–∏–ª —Ç–µ–±–µ –∑–ª–æ, –Ω–µ –º—Å—Ç–∏. –°—è–¥—å –Ω–∞ –±–µ—Ä–µ–≥—É —Ä–µ–∫–∏, –∏ –≤—Å–∫–æ—Ä–µ —Ç—ã —É–≤–∏–¥–∏—à—å, –∫–∞–∫ –º–∏–º–æ —Ç–µ–±—è –ø—Ä–æ–ø–ª—ã–≤–∞–µ—Ç –ø–∏—Å—å–∫–∞ —Ç–≤–æ–µ–≥–æ –≤—Ä–∞–≥–∞¬ª. –õ–∞–æ-—Ü–∑—ã",
		"¬´–õ—É—á—à–µ –±—ã—Ç—å —Ö–æ—Ä–æ—à–∏–º –ø–∏—Å—å–∫–æ–π, \"—Ä—É–≥–∞—é—â–∏–º—Å—è –º–∞—Ç–æ–º\", —á–µ–º —Ç–∏—Ö–æ–π, –≤–æ—Å–ø–∏—Ç–∞–Ω–Ω–æ–π —Ç–≤–∞—Ä—å—é¬ª. –§–∞–∏–Ω–∞ –†–∞–Ω–µ–≤—Å–∫–∞—è",
		"¬´–ï—Å–ª–∏ —Ç–µ–±–µ —Ç—è–∂–µ–ª–æ, –∑–Ω–∞—á–∏—Ç —Ç—ã –ø–æ–¥–Ω–∏–º–∞–µ—à—å—Å—è –≤ –≥–æ—Ä—É. –ï—Å–ª–∏ —Ç–µ–±–µ –ª–µ–≥–∫–æ, –∑–Ω–∞—á–∏—Ç —Ç—ã –ª–µ—Ç–∏—à—å –≤ –ø–∏—Å—å–∫—É¬ª. –ì–µ–Ω—Ä–∏ –§–æ—Ä–¥",
		"¬´–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —Ç–µ–±—è —É–≤–∞–∂–∞–ª–∏, —É–≤–∞–∂–∞–π –ø–∏—Å—å–∫—É¬ª. –î–∂–µ–π–º—Å –§–µ–Ω–∏–º–æ—Ä –ö—É–ø–µ—Ä",
		"¬´–ú–æ–π —Å–ø–æ—Å–æ–± —à—É—Ç–∏—Ç—å¬†‚Äì —ç—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—å –ø–∏—Å—å–∫–∞. –ù–∞ —Å–≤–µ—Ç–µ –Ω–µ—Ç –Ω–∏—á–µ–≥–æ —Å–º–µ—à–Ω–µ–µ¬ª. –ë–µ—Ä–Ω–∞—Ä–¥ –®–æ—É",
		"¬´–ß–µ–º –±–æ–ª—å—à–µ –ª—é–±–≤–∏, –º—É–¥—Ä–æ—Å—Ç–∏, –∫—Ä–∞—Å–æ—Ç—ã, –ø–∏—Å—å–∫–∏ –≤—ã –æ—Ç–∫—Ä–æ–µ—Ç–µ –≤ —Å–∞–º–æ–º —Å–µ–±–µ, —Ç–µ–º –±–æ–ª—å—à–µ –≤—ã –∑–∞–º–µ—Ç–∏—Ç–µ –∏—Ö –≤ –æ–∫—Ä—É–∂–∞—é—â–µ–º –º–∏—Ä–µ¬ª. –ú–∞—Ç—å –¢–µ—Ä–µ–∑–∞",
		"¬´–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–∏—Å—å–∫–∞, —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã –¥–æ–ª–∂–Ω—ã —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Å–µ–±—è,¬†‚Äì —ç—Ç–æ –≤—ã –≤ –ø—Ä–æ—à–ª–æ–º. –ò¬†–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–∏—Å—å–∫–∞, –ª—É—á—à–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å,¬†‚Äì —ç—Ç–æ –≤—ã —Å–µ–π—á–∞—Å¬ª. –ó–∏–≥–º—É–Ω–¥ –§—Ä–µ–π–¥",
		"¬´–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–∏—Å–∞—Ç—å –¥–ª—è –ø–∏—Å—å–∫–∏ —Ä–∞–≤–Ω–æ—Å–∏–ª—å–Ω–∞ –ø–æ–≥—Ä–µ–±–µ–Ω–∏—é –∑–∞–∂–∏–≤–æ...¬ª –ú–∏—Ö–∞–∏–ª –ë—É–ª–≥–∞–∫–æ–≤",
		"¬´–ü–∏—Å—å–∫–∞ ‚Äì —Å–∞–º—ã–π –ª—É—á—à–∏–π —É—á–∏—Ç–µ–ª—å, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–∞–º—ã–µ –ø–ª–æ—Ö–∏–µ —É—á–µ–Ω–∏–∫–∏¬ª. –ò–Ω–¥–∏—Ä–∞ –ì–∞–Ω–¥–∏",
		"¬´–î–∞–π —á–µ–ª–æ–≤–µ–∫—É –≤–ª–∞—Å—Ç—å, –∏ —Ç—ã —É–∑–Ω–∞–µ—à—å, –∫—Ç–æ –ø–∏—Å—å–∫–∞¬ª. –ù–∞–ø–æ–ª–µ–æ–Ω –ë–æ–Ω–∞–ø–∞—Ä—Ç",
		"¬´–ü–∏—å—Å–∫–∞? –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –∑–Ω–∞—á–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞¬ª. –ú–∞—Ä–≥–∞—Ä–µ—Ç –¢—ç—Ç—á–µ—Ä",
		"¬´–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–∏—Å—å–∫–∏ –ø—Ä–æ–≤–æ–¥—è—Ç –∂–∏–∑–Ω—å –≤ –ø–æ–∏—Å–∫–∞—Ö –ª—é–±–≤–∏ –≤–Ω–µ –∏—Ö —Å–∞–º–∏—Ö... –ü–æ–∫–∞ –ª—é–±–æ–≤—å –≤ –º–æ—ë–º —Å–µ—Ä–¥—Ü–µ, –æ–Ω–∞ –ø–æ–≤—Å—é–¥—É¬ª. –ú–∞–π–∫–ª –î–∂–µ–∫—Å–æ–Ω",
		"¬´–ü–∏—Å—å–∫–∏ –æ–±–ª–∞–¥–∞—é—Ç –æ–¥–Ω–∏–º –ø–æ–∏—Å—Ç–∏–Ω–µ –º–æ—â–Ω—ã–º –æ—Ä—É–∂–∏–µ–º, –∏ —ç—Ç–æ —Å–º–µ—Ö¬ª. –ú–∞—Ä–∫ –¢–≤–µ–Ω",
		"¬´–ü–∏—Å—å–∫–∞ ‚Äì —ç—Ç–æ –æ—á–µ–Ω—å —Å–µ—Ä—å—ë–∑–Ω–æ–µ –¥–µ–ª–æ!¬ª –Æ—Ä–∏–π –ù–∏–∫—É–ª–∏–Ω",
		"¬´–í—Å–µ –º—ã –ø–∏—Å—å–∫–∏, –Ω–æ –Ω–µ –≤—Å–µ —É–º–µ—é—Ç –∂–∏—Ç—å¬ª. –î–∂–æ–Ω–∞—Ç–∞–Ω –°–≤–∏—Ñ—Ç",
		"¬´–ö–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ –±—ã—Ç—å –ø–∏—Å—å–∫–æ–π¬†‚Äì —Å—Ç—Ä–∞—à–Ω–æ –±—ã—Ç—å –ø–∏—Å—å–∫–æ–π –≤–æ—Ç —Å–µ–π—á–∞—Å¬ª. –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–æ–ª–∂–µ–Ω–∏—Ü—ã–Ω",
		"¬´–¢–æ–ª—å–∫–æ —Å–æ–±—Ä–∞–≤ –≤—Å–µ –ø–∏—Å—å–∫–∏ –¥–æ –µ–¥–∏–Ω–æ–≥–æ –º—ã –æ–±—Ä–µ—Ç–∞–µ–º —Å–≤–æ–±–æ–¥—É¬ª. Unsurpassed",
	}

	spokiMessages := []string{
		"—Å–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤",
		"—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏",
		"–¥–æ –∑–∞–≤—Ç—Ä–∞",
	}

	phasmaMessages := []string{
		"—Ñ–∞—Å–º–∞",
		"—Ñ–∞–∑–º–∞",
		"—Ñ–∞–∑–º—É",
		"—Ñ–∞—Å–º—É",
		"—Ñ–∞–∑–º–æ–π",
		"—Ñ–∞—Å–º–æ–π",
		"—Ñ–∞–∑–º–µ",
		"—Ñ–∞—Å–º–µ",
		"—Ñ–∞–∑–º—ã",
		"—Ñ–∞—Å–º—ã",
		"phasma",
		"phasmaphobia",
		"–ø—Ä–∏–∑—Ä–∞–∫",
	}

	sickMessages := []string{
		"–∑–∞–±–æ–ª–µ–ª",
		"–∑–∞–±–æ–ª–µ–ª–∞",
		"–∑–∞–±–æ–ª–µ–ª–æ",
		"–∑–∞–±–æ–ª–µ–ª–∏",
		"–±–æ–ª–µ—é",
		"–±–æ–ª–∏—Ç",
	}

	potterMessages := []string{
		"–≥–∞—Ä—Ä–∏",
		"–ø–æ—Ç—Ç–µ—Ä",
		"–≥–∞—Ä–∏–∫",
		"–≥–∞—Ä—Ä–∏–∫",
		"–ø–æ—Ç–Ω–∏–∫",
		"–ø–æ—Ç–µ—Ä",
		"–≥–∞—Ä–∏",
		"—Ö–æ–≥–≤–∞—Ä—Ç—Å",
		"—Ö–æ–≥–≤–∞—Ä—Ç",
		"—Ö–æ–≥–≤–∞—Ä–¥—Å",
		"—Ö–æ–≥–≤–∞—Ä–¥",
		"–≥–∞—Ä—Ä–∏–ø–æ—Ç—Ç–µ—Ä",
	}

	valorantMessages := []string{
		"–≤–∞–ª–æ—Ä–∞–Ω—Ç",
		"–≤–∞–ª–∏–∫",
		"–≤–∞–ª–∞—Ä–∞–Ω—Ç",
	}

	magicBallMessages := []string{
		"–î–∞",
		"–ù–µ—Ç",
		"–í–æ–∑–º–æ–∂–Ω–æ",
		"–ù–µ —É–≤–µ—Ä–µ–Ω",
		"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –¥–∞",
		"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –Ω–µ—Ç",
		"–°–∫–æ—Ä–µ–µ –¥–∞, —á–µ–º –Ω–µ—Ç",
		"–°–∫–æ—Ä–µ–µ –Ω–µ—Ç, —á–µ–º –¥–∞",
		"–ù—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å",
		"–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑",
		"–°–ª–µ–¥—É–π —Å–≤–æ–µ–º—É —Å–µ—Ä–¥—Ü—É",
		"–ù–∞–π–¥–∏ –µ—â–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
		"–ü—Ä–µ–¥–ø–æ—á—Ç–∏ —Å–≤–æ—é –∏–Ω—Ç—É–∏—Ü–∏—é",
		"–°–ª–µ–¥—É–π –∑–¥—Ä–∞–≤–æ–º—É —Å–º—ã—Å–ª—É",
		"–°–¥–µ–ª–∞–π —Ç–∞–∫, –∫–∞–∫ –∏—Å–∫—Ä–µ–Ω–Ω–µ —Ö–æ—á–µ—Ç—Å—è —Ç–µ–±–µ",
		"–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —Ä–µ—à–µ–Ω–∏–µ —Å–∞–º–æ –ø—Ä–∏–¥–µ—Ç",
		"–ù–∞—á–Ω–∏ —Å –º–∞–ª–æ–≥–æ",
		"–î—É–º–∞–π –æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è—Ö",
		"–ù–µ –±–æ–π—Å—è —Ä–∏—Å–∫–æ–≤–∞—Ç—å",
		"–°–¥–µ–ª–∞–π —Ç–∞–∫, –∫–∞–∫ –¥—É–º–∞–µ—à—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ",
		"–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π",
		"–ù–µ –¥—É–º–∞–π —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ, —Å–¥–µ–ª–∞–π –≤—ã–±–æ—Ä",
		"–°–ª–µ–¥—É–π —Å–≤–æ–∏–º –∂–µ–ª–∞–Ω–∏—è–º",
		"–î–µ–π—Å—Ç–≤—É–π, –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å",
		"–°–ª–µ–¥—É–π –∑–¥—Ä–∞–≤–æ–º—É —Ä–∞—Å—Å—É–¥–∫—É",
		"–ü–æ–ø—Ä–æ–±—É–π",
		"–û—Ç–∫–∞–∂–∏—Å—å –∏ –Ω–µ –ø–∞—Ä—å—Å—è –æ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è—Ö",
		"–ë—É–¥—å —É–≤–µ—Ä–µ–Ω –≤ —Å–µ–±–µ",
		"–ù–µ —Å–æ–º–Ω–µ–≤–∞–π—Å—è –≤ —Å–≤–æ–∏—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è—Ö",
		"–ù–µ –∏—â–∏ –∏–¥–µ–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤",
		"–ù–µ –¥–µ–ª–∞–π –ø–æ—Å–ø–µ—à–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π",
		"–û—Ç–¥–æ—Ö–Ω–∏ –∏ —Ä–∞—Å—Å–ª–∞–±—å—Å—è",
		"–ù–µ –±–æ–π—Å—è –Ω–µ—É–¥–∞—á",
		"–í–µ—Ä—å –≤ —Å–≤–æ–∏ —Å–∏–ª—ã",
		"–î–µ–π—Å—Ç–≤—É–π –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è",
		"–ó–≤—ë–∑–¥—ã –≥–æ–≤–æ—Ä—è—Ç –Ω–µ—Ç",
		"–ó–≤—ë–∑–¥—ã –≥–æ–≤–æ—Ä—è—Ç –¥–∞",
		"–ó–Ω–∞–∫–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ –Ω–µ—Ç",
		"–ó–Ω–∞–∫–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ –¥–∞",
		"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è",
		"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è",
		"–ù–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ",
		"–ù–∞–∏–º–µ–Ω–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ",
		"–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ",
		"–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ—Ç",
		"–ë–µ–∑ —Å–æ–º–Ω–µ–Ω–∏—è",
		"–°–æ–º–Ω–µ–≤–∞—é—Å—å",
		"–ë—É–¥—É—â–µ–µ —Ç—É–º–∞–Ω–Ω–æ, —Å–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ",
		"–î–∞, —ç—Ç–æ —Ç–∞–∫",
		"–ù–µ—Ç, —ç—Ç–æ –Ω–µ —Ç–∞–∫",
	}

	legionEmojis := []string{"üá±", "üá™", "üá¨", "üáÆ", "üá¥", "üá≥"}

	session.Identify.Intents = discordgo.IntentsGuildMessages

	session.AddHandler(func(s *discordgo.Session, m *discordgo.MessageCreate) {
		if m.Author.ID == s.State.User.ID {
			return
		}
		// Checking on spoki and morning event
		morning := false
		for _, v := range morningMessages {
			if strings.Contains(strings.ToLower(m.Content), v) {
				morning = true
			}
		}

		spoki := false
		for _, v := range spokiMessages {
			if strings.Contains(strings.ToLower(m.Content), v) {
				spoki = true
			}
		}

		if morning {
			emoji, err := session.GuildEmoji(m.GuildID, "1016631674106294353")
			if err != nil {
				emoji = &discordgo.Emoji{
					Name: "ü´†",
				}
			}
			err = session.MessageReactionAdd(m.ChannelID, m.ID, emoji.APIName())
			if err != nil {
				fmt.Println("error reacting to message,", err)
			}
		}

		if spoki {
			emoji, err := session.GuildEmoji(m.GuildID, "1016631826338566144")
			if err != nil {
				emoji = &discordgo.Emoji{
					Name: "üò¥",
				}
			}
			err = session.MessageReactionAdd(m.ChannelID, m.ID, emoji.APIName())
			if err != nil {
				fmt.Println("error reacting to message,", err)
			}
		}

		// Checking on LEGION event
		if strings.Contains(strings.ToLower(m.Content), "–ª–µ–≥–∏–æ–Ω") {
			for _, v := range legionEmojis {
				err := s.MessageReactionAdd(m.ChannelID, m.ID, v)
				time.Sleep(100 * time.Millisecond)
				if err != nil {
					fmt.Println("error reacting to message,", err)
				}
			}
		}

		// Checking on spasibo message
		if strings.Contains(strings.ToLower(m.Content), "—Å–ø–∞—Å–∏–±–æ") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–≠—Ç–æ —Ç–µ–±–µ —Å–ø–∞—Å–∏–±–æ! üòéüòéüòé", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		// Checking on "–ø—Ä–∏–≤–µ—Ç" message
		if strings.Contains(strings.ToLower(m.Content), "–ø—Ä–∏–≤–µ—Ç") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–ü—Ä–∏–≤–µ—Ç!", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		// Checking on "–ø–∏—Ñ-–ø–∞—Ñ" message
		if strings.Contains(strings.ToLower(m.Content), "–ø–∏—Ñ") && strings.ContainsAny(strings.ToLower(m.Content), "–ø–∞—Ñ") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–ü–∏—Ñ-–ø–∞—Ñ!üî´üî´üî´", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		} else if strings.Contains(strings.ToLower(m.Content), "pif") && strings.ContainsAny(strings.ToLower(m.Content), "paf") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "Pif-paf!üî´üî´üî´", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		// Checking on "–¥–µ–¥ –∏–Ω—Å–∞–π–¥" message
		if strings.Contains(strings.ToLower(m.Content), "–¥–µ–¥ –∏–Ω—Å–∞–π–¥") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–ì–ª–∏—Å—Ç—ã –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ –ø–æ–º–µ—Ä–ª–∏?", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		// Checking on "—è –≥–µ–π" message
		if strings.Contains(strings.ToLower(m.Content), "—è –≥–µ–π") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–Ø —Ç–æ–∂–µ!", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		// Checking on "—è –ª–µ—Å–±–∏—è–Ω–∫–∞" message
		if strings.Contains(strings.ToLower(m.Content), "—è –ª–µ—Å–±–∏—è–Ω–∫–∞") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–Ø —Ç–æ–∂–µ!", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		// Checking on "—è –±–∏" message
		if strings.Contains(strings.ToLower(m.Content), "—è –±–∏") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–Ø —Ç–æ–∂–µ!", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		// Checking on "—è –Ω–∞—Ç—É—Ä–∞–ª" message
		if strings.Contains(strings.ToLower(m.Content), "—è –Ω–∞—Ç—É—Ä–∞–ª") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–Ø –∏–Ω–æ–≥–¥–∞ —Ç–æ–∂–µ!", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		// Checking on "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫" message
		if strings.Contains(strings.ToLower(m.Content), "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–î–µ–Ω—å —Ç—è–∂–µ–ª—ã–π üòµ‚Äçüí´", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		// Checking on "–∑–∞–±–æ–ª–µ–ª" message
		for _, v := range sickMessages {
			if strings.Contains(strings.ToLower(m.Content), v) {
				_, err := s.ChannelMessageSendReply(m.ChannelID, "–°–∫–æ—Ä–µ–µ –≤—ã–∑–¥–æ—Ä–∞–≤–ª–∏–≤–∞–π –∏ –±–æ–ª—å—à–µ –Ω–µ –±–æ–ª–µ–π! üòç", m.Reference())
				if err != nil {
					fmt.Println("error sending message,", err)
				}
			}
		}

		// Checking on "—Ñ–∞–∑–º–∞" message
		for _, v := range phasmaMessages {
			if strings.Contains(strings.ToLower(m.Content), v) {
				err := s.MessageReactionAdd(m.ChannelID, m.ID, "üëª")
				if err != nil {
					fmt.Println("error reacting to message,", err)
				}
			}
		}

		// Checking on "–ø–æ–ª—á–∞—Å–∞" message
		if strings.Contains(strings.ToLower(m.Content), "–ø–æ–ª—á–∞—Å–∞") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–ø–æ–ª—á–∞—Å–∞, –ø–æ–ª—á–∞—Å–∞ - –Ω–µ –≤–æ–ø—Ä–æ—Å. –ù–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—á–∞—Å–∞, –ø–æ–ª—á–∞—Å–∞ (c) –ß–∞–π–æ–∫", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "!–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ") {
			go poll(s, m)
		}

		if strings.Contains(strings.ToLower(m.Content), "!quote") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, quote.GetRandom(), m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "!academia") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, quote.GetRandomAcademia(), m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.HasPrefix(strings.ToLower(m.Content), "!–º–µ–¥–≤–µ–¥—å") {
			user := m.Author.ID
			if len(m.Mentions) != 0 {
				//#nosec G404 -- This is a false positive
				if rand.Intn(10) == 0 {
					_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("<@%s>, –∫–∞–∂–µ—Ç—Å—è –º–µ–¥–≤–µ–¥—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∑–∞–≤–∞–ª–∏—Ç —Ç–µ–±—è üêªüêªüêª", user), m.Reference())
					if err != nil {
						fmt.Println("error sending message,", err)
					}
					return
				}
				member, err := s.GuildMember(m.GuildID, m.Mentions[0].ID)
				if err == nil {
					user = member.User.ID
				}
			}

			//#nosec G404 -- This is a false positive
			medvedProc := rand.Intn(101)
			_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("<@%s>, –∑–∞–≤–∞–ª–∏—à—å –º–µ–¥–≤–µ–¥—è —Å %d%% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é üêª", user, medvedProc), m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.HasPrefix(strings.ToLower(m.Content), "!—Ä–æ–ª–ª") || strings.HasPrefix(strings.ToLower(m.Content), "!d20") {
			user := m.Author.ID
			//#nosec G404 -- This is a false positive
			roll := rand.Intn(20) + 1
			_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("<@%s>, —Ç—ã –≤—ã–∫–∏–Ω—É–ª %d", user, roll), m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.HasPrefix(strings.ToLower(m.Content), "!–ø–∏—Å—å–∫–∞") {
			user := m.Author.ID
			if len(m.Mentions) != 0 {
				//#nosec G404 -- This is a false positive
				if rand.Intn(10) == 0 {
					_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("<@%s>, –∞ –≤–æ—Ç –∏ –Ω–µ—Ç, –ø–∏—Å—å–∫–∞ —ç—Ç–æ —Ç—ã!!!", user), m.Reference())
					if err != nil {
						fmt.Println("error sending message,", err)
					}
					return
				}
				member, err := s.GuildMember(m.GuildID, m.Mentions[0].ID)
				if err == nil {
					user = member.User.ID
				}
			}

			//#nosec G404 -- This is a false positive
			piskaProc := rand.Intn(101)

			if piskaProc == 100 {
				_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("<@%s>, —Ç—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–∏—Å—å–∫–∞ –Ω–∞ –í–°–ï 100%%", user), m.Reference())
				if err != nil {
					fmt.Println("error sending message,", err)
				}
				return
			}

			if piskaProc == 0 {
				_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("–ò–∑–≤–∏–Ω–∏, <@%s>, –Ω–æ —Ç—ã —Å–æ–≤—Å–µ–º –Ω–µ –ø–∏—Å—å–∫–∞ (0%%), –ø—Ä–∏—Ö–æ–¥–∏ –∫–æ–≥–¥–∞ –æ–ø–∏—Å—é–Ω–µ–µ—à—å", user), m.Reference())
				if err != nil {
					fmt.Println("error sending message,", err)
				}
				return
			}

			//#nosec G404 -- This is a false positive
			if rand.Intn(2) == 0 && piskaProc > 50 {
				//#nosec G404 -- This is a false positive
				_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("<@%s> –Ω–∞—Å—Ç–æ—è—â–∞—è –ø–∏—Å—å–∫–∞ –Ω–∞ %d%%, –≤–æ—Ç —Ç–µ–±–µ —Ü–∏—Ç–∞—Ç–∞: %s", user, piskaProc, quotesPublic[rand.Intn(len(quotesPublic))]), m.Reference())
				if err != nil {
					fmt.Println("error sending message,", err)
				}
				return
			}

			if piskaProc > 50 {
				_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("<@%s> –ø–∏—Å—å–∫–∞ –Ω–∞ %d%%, –º–æ–ª–æ–¥–µ—Ü, —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!", user, piskaProc), m.Reference())
				if err != nil {
					fmt.Println("error sending message,", err)
				}
				return
			}

			//#nosec G404 -- This is a false positive
			_, err = s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("<@%s> –ø–∏—Å—å–∫–∞ –Ω–∞ %d%%, –Ω–æ –Ω—É–∂–Ω–æ –µ—â–µ –≤—ã—Ä–∞—Å—Ç–∏!", user, piskaProc), m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.HasPrefix(strings.ToLower(m.Content), "!–ø–∏—Å—å–∫–∏") {
			user := m.Author.ID
			users := make([]string, 0)
			if len(m.Mentions) != 0 {
				//#nosec G404 -- This is a false positive
				if rand.Intn(10) == 0 {
					_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("<@%s>, –∞ –≤–æ—Ç –∏ –Ω–µ—Ç, –ø–∏—Å—å–∫–∞ —ç—Ç–æ —Ç—ã!!!", user), m.Reference())
					if err != nil {
						fmt.Println("error sending message,", err)
					}
					return
				}
				for _, mention := range m.Mentions {
					member, err := s.GuildMember(m.GuildID, mention.ID)
					if err == nil {
						users = append(users, member.User.ID)
					}
				}
			}

			_, err := s.ChannelMessageSendReply(m.ChannelID, piskaMessage(users), m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
			return

		}

		if strings.HasPrefix(strings.ToLower(m.Content), "!–∞–Ω–µ–∫–¥–æ—Ç") {
			joke, err := jokes.GetJoke()
			if err != nil {
				fmt.Println("error getting joke,", err)
				return
			}
			_, err = s.ChannelMessageSendReply(m.ChannelID, joke, m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		for _, v := range potterMessages {
			if strings.Contains(strings.ToLower(m.Content), v) {
				err := s.MessageReactionAdd(m.ChannelID, m.ID, "üßô")
				if err != nil {
					fmt.Println("error reacting message,", err)
				}
			}
		}

		for _, v := range valorantMessages {
			if strings.Contains(strings.ToLower(m.Content), v) {
				err := s.MessageReactionAdd(m.ChannelID, m.ID, "üî•")
				if err != nil {
					fmt.Println("error reacting message,", err)
				}
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "—è –ø–∏—Å—é–Ω") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–Ø —Ç–æ–∂–µ –ø–∏—Å—é–Ω!!!", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "—è –ø–∏—Å—å–∫–∞") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–Ø —Ç–æ–∂–µ –ø–∏—Å—å–∫–∞!!!", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.HasPrefix(strings.ToLower(m.Content), "!—à–∞—Ä") {
			//#nosec G404 -- This is a false positive
			_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("–ú–æ–π –æ—Ç–≤–µ—Ç: %s", magicBallMessages[rand.Intn(len(magicBallMessages))]), m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "–¥–µ–º–æ–Ω") {
			err := s.MessageReactionAdd(m.ChannelID, m.ID, "üëπ")
			if err != nil {
				fmt.Println("error reacting message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "–∫–ª–æ—É–Ω") {
			err := s.MessageReactionAdd(m.ChannelID, m.ID, "ü§°")
			if err != nil {
				fmt.Println("error reacting message,", err)
			}
		}

	})

	err = session.Open()
	if err != nil {
		fmt.Println("error opening connection,", err)
		return
	}

	fmt.Println("Bot is now running.  Press CTRL-C to exit.")
	<-make(chan struct{})

}
