package main

import (
	"fmt"
	rand "math/rand/v2"
	"os"
	"strconv"
	"strings"
	"time"

	"github.com/bwmarrin/discordgo"
	"github.com/joho/godotenv"
	"github.com/lefes/curly-broccoli/jokes"
	"github.com/lefes/curly-broccoli/quotes"
)

func handleRaceCommand(s *discordgo.Session, m *discordgo.MessageCreate) {
	if raceInProgress {
		s.ChannelMessageSend(m.ChannelID, "–ì–æ–Ω–∫–∞ —É–∂–µ –∏–¥–µ—Ç! –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –≥–æ–Ω–∫–∏.")
		return
	}

	raceInProgress = true
	s.ChannelMessageSend(m.ChannelID, "–ó–∞–µ–∑–¥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –ù–∞–ø–∏—à–∏—Ç–µ !–≥–æ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è. –£ –≤–∞—Å –µ—Å—Ç—å 1 –º–∏–Ω—É—Ç–∞.")

	time.AfterFunc(1*time.Minute, func() {
		startRace(s, m)
	})
}

func handleJoinRaceCommand(s *discordgo.Session, m *discordgo.MessageCreate) {
	if !raceInProgress {
		s.ChannelMessageSend(m.ChannelID, "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≥–æ–Ω–∫–∏. –ù–∞–ø–∏—à–∏—Ç–µ !–≥–æ–Ω–∫–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é.")
		return
	}

	raceMutex.Lock()
	defer raceMutex.Unlock()

	if _, exists := raceParticipants[m.Author.ID]; exists {
		s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("<@%s>, —Ç—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ –∑–∞–µ–∑–¥–µ!", m.Author.ID))
		return
	}

	emoji := raceEmojis[rand.IntN(len(raceEmojis))]
	raceParticipants[m.Author.ID] = emoji
	s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("<@%s> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥–æ–Ω–∫–µ –∫–∞–∫ %s!", m.Author.ID, emoji))
}

func startRace(s *discordgo.Session, m *discordgo.MessageCreate) {
	if len(raceParticipants) < 2 {
		s.ChannelMessageSend(m.ChannelID, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≥–æ–Ω–∫–∏. –ì–æ–Ω–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
		raceInProgress = false
		raceParticipants = make(map[string]string)
		return
	}

	initialMessage := "üèÅ **–ì–æ–Ω–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!** üèÅ\n\n"
	for id := range raceParticipants {
		initialMessage += fmt.Sprintf("<@%s> %s –Ω–∞ —Å—Ç–∞—Ä—Ç–µ üèéÔ∏èüí®\n", id, raceParticipants[id])
	}
	raceMessage, err := s.ChannelMessageSend(m.ChannelID, initialMessage)
	if err != nil {
		fmt.Println("error sending message:", err)
		return
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–∞
	raceTrack := make(map[string]int)
	for id := range raceParticipants {
		raceTrack[id] = 0
	}

	// –ó–∞–ø—É—Å–∫ –≥–æ–Ω–∫–∏
	winner := ""
	trackLength := 20
	for winner == "" {
		time.Sleep(1 * time.Second)
		raceStatus := "```üèÅ –ì–æ–Ω–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ üèÅ\n\n"
		for id, emoji := range raceParticipants {
			raceTrack[id] += rand.IntN(3)
			if raceTrack[id] >= trackLength {
				raceTrack[id] = trackLength
				winner = id
				break
			}
			progress := strings.Repeat("‚Äî", raceTrack[id])
			emptySpace := strings.Repeat("‚Äî", trackLength-raceTrack[id])
			raceStatus += fmt.Sprintf("üö¶ |%s%s%s|\n", progress, emoji, emptySpace)
		}
		raceStatus += "```"

		_, err := s.ChannelMessageEdit(m.ChannelID, raceMessage.ID, raceStatus)
		if err != nil {
			fmt.Println("error editing message:", err)
			return
		}
	}

	finalMessage := fmt.Sprintf("üéâ **–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –≥–æ–Ω–∫–∏:** <@%s> %s! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üèÜüéâ", winner, raceParticipants[winner])
	s.ChannelMessageSend(m.ChannelID, finalMessage)

	raceInProgress = false
	raceParticipants = make(map[string]string)
}

func handleBeerCommand(s *discordgo.Session, m *discordgo.MessageCreate) {
	args := strings.Split(m.Content, " ")
	if len(args) != 2 {
		s.ChannelMessageSend(m.ChannelID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !–ø–∏–≤–æ <—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20>")
		return
	}

	amount, err := strconv.Atoi(args[1])
	if err != nil || amount < 1 || amount > 20 {
		s.ChannelMessageSend(m.ChannelID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20.")
		return
	}

	successChance := 100 - (amount * 5)
	if successChance < 5 {
		successChance = 5
	}

	roll := rand.IntN(100) + 1

	if roll <= successChance {
		var successMessage string
		if amount == 20 {
			successMessage = fmt.Sprintf("<@%s> –≤—ã–ø–∏–ª %d –ª–∏—Ç—Ä–æ–≤ –ø–∏–≤–∞ –∏ –æ—Å—Ç–∞–ª—Å—è –∂–∏–≤?! üéâüçª\n\n", m.Author.ID, amount)
			s.ChannelMessageSend(m.ChannelID, successMessage)
			s.ChannelMessageSend(m.ChannelID, "https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExejN4bjU1cTc1NDRodXU1OGd1NTExNTZheXRwOTdkaHNycWwyMTdtZyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/qiSGGu0d2Dgac/giphy.gif")
		} else {
			successMessage = fmt.Sprintf("<@%s> —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–∏–ª %d –ª–∏—Ç—Ä–æ–≤ –ø–∏–≤–∞! üç∫\n\n", m.Author.ID, amount)
			s.ChannelMessageSend(m.ChannelID, successMessage)
		}
	} else {
		var failureMessage string
		if amount == 20 {
			failureMessage = fmt.Sprintf("<@%s> –Ω–µ —Å–º–æ–≥ –æ—Å–∏–ª–∏—Ç—å %d –ª–∏—Ç—Ä–æ–≤ –ø–∏–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –±–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ 5 –º–∏–Ω—É—Ç! üç∫üò¥\n\n", m.Author.ID, amount)
			s.ChannelMessageSend(m.ChannelID, failureMessage)
			s.ChannelMessageSend(m.ChannelID, "https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExd3Rqb3NycG0xZTRqNHZoamgybmVmOGRvYTcyamViNGJ6ZGM0YjA1MSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/7bx7ZHokGnofm/giphy-downsized-large.gif")
		} else if amount >= 15 {
			failureMessage = fmt.Sprintf("<@%s> –Ω–µ –æ—Å–∏–ª–∏–ª %d –ª–∏—Ç—Ä–æ–≤ –ø–∏–≤–∞. –ü–æ—Ö–æ–∂–µ, —Ç—ã –Ω–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª—Å—è –∫ –Ω–∞—Å—Ç–æ—è—â–µ–π –ø—å—è–Ω–∫–µ. –°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏ –Ω–∞ 5 –º–∏–Ω—É—Ç! üç∫üò¥\n\n", m.Author.ID, amount)
			s.ChannelMessageSend(m.ChannelID, failureMessage)
		} else if amount >= 10 {
			failureMessage = fmt.Sprintf("<@%s> –Ω–µ —Å–º–æ–≥ –≤—ã–ø–∏—Ç—å %d –ª–∏—Ç—Ä–æ–≤ –ø–∏–≤–∞. –ù–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –ø–æ–ª—É—á–∏—Ç—Å—è! –ú—É—Ç –Ω–∞ 5 –º–∏–Ω—É—Ç! üçªüò¥\n\n", m.Author.ID, amount)
			s.ChannelMessageSend(m.ChannelID, failureMessage)
		} else {
			failureMessage = fmt.Sprintf("<@%s> –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å %d –ª–∏—Ç—Ä–∞–º–∏ –ø–∏–≤–∞. –ù–∞–¥–æ –±–æ–ª—å—à–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è! –ú—É—Ç –Ω–∞ 5 –º–∏–Ω—É—Ç. üç∫üò¥\n\n", m.Author.ID, amount)
			s.ChannelMessageSend(m.ChannelID, failureMessage)
		}

		muteDuration := 5 * time.Minute
		muteUntil := time.Now().Add(muteDuration)
		err := s.GuildMemberTimeout(m.GuildID, m.Author.ID, &muteUntil)
		if err != nil {
			fmt.Println("Error muting member:", err)
			return
		}
	}
}

func poll(session *discordgo.Session, m *discordgo.MessageCreate) {
	users, err := session.GuildMembers(m.GuildID, "", 300)
	if err != nil {
		fmt.Println("error getting users,", err)
		return
	}

	rand.Shuffle(len(users), func(i, j int) { users[i], users[j] = users[j], users[i] })
	users = users[:3]

	poll := &discordgo.MessageEmbed{
		Title: "–ö—Ç–æ —Å–µ–≥–æ–¥–Ω—è –ø–∏—Å—å–∫–∞??? ü§îü§îü§î",
		Color: 0x00ff00,
		Fields: []*discordgo.MessageEmbedField{
			{
				Name:   "1",
				Value:  getNick(users[0]),
				Inline: true,
			},
			{
				Name:   "2",
				Value:  getNick(users[1]),
				Inline: true,
			},
			{
				Name:   "3",
				Value:  getNick(users[2]),
				Inline: true,
			},
		},
	}

	pollMessage, err := session.ChannelMessageSendEmbed(m.ChannelID, poll)
	if err != nil {
		fmt.Println("error sending poll,", err)
		return
	}

	reactions := []string{"1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£"}
	// Add reactions to the poll

	for _, v := range reactions {
		err := session.MessageReactionAdd(pollMessage.ChannelID, pollMessage.ID, v)
		if err != nil {
			fmt.Println("error adding reaction,", err)
			return
		}
	}

	time.Sleep(30 * time.Minute)

	pollResults, err := session.ChannelMessage(pollMessage.ChannelID, pollMessage.ID)
	if err != nil {
		fmt.Println("error getting poll results,", err)
		return
	}

	var mostVotedOption string
	var mostVotedOptionCount int
	for _, v := range pollResults.Reactions {
		if v.Count > mostVotedOptionCount {
			mostVotedOption = v.Emoji.Name
			mostVotedOptionCount = v.Count
		}
	}

	// Get the winner
	var winner *discordgo.Member
	switch mostVotedOption {
	case "1Ô∏è‚É£":
		winner = users[0]
	case "2Ô∏è‚É£":
		winner = users[1]
	case "3Ô∏è‚É£":
		winner = users[2]
	}

	// Congratulate the winner
	_, err = session.ChannelMessageSend(m.ChannelID, fmt.Sprintf("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, <@%s>, —Ç—ã —Å–µ–≥–æ–¥–Ω—è –ø–∏—Å—å–∫–∞! üéâüéâüéâ", winner.User.ID))
	if err != nil {
		fmt.Println("error congratulating the winner,", err)
	}

}

func init() {
	err := godotenv.Load(".env")
	if err != nil {
		fmt.Println("Error loading .env file")
	}

	Token = os.Getenv("TOKEN")
	if Token == "" {
		panic("You need to set the TOKEN environment variable.")
	}
}

func getNick(member *discordgo.Member) string {
	if member.Nick == "" {
		return member.User.Username
	}
	return member.Nick
}

func piskaMessage(users []string) string {
	var message string
	message += "ü§îü§îü§î"
	for _, user := range users {
		// #nosec G404 -- This is a false positive
		piskaProc := rand.IntN(101)
		switch {
		case piskaProc == 0:
			message += fmt.Sprintf("\n–ò–∑–≤–∏–Ω–∏, <@%s>, –Ω–æ —Ç—ã —Å–æ–≤—Å–µ–º –Ω–µ –ø–∏—Å—å–∫–∞ (0%%), –ø—Ä–∏—Ö–æ–¥–∏ –∫–æ–≥–¥–∞ –æ–ø–∏—Å—é–Ω–µ–µ—à—å", user)
		case piskaProc == 100:
			message += fmt.Sprintf("\n<@%s>, —Ç—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–∏—Å—å–∫–∞ –Ω–∞ –í–°–ï 100%%", user)
		case piskaProc >= 50:
			message += fmt.Sprintf("\n<@%s> –ø–∏—Å—å–∫–∞ –Ω–∞ %d%%, –º–æ–ª–æ–¥–µ—Ü, —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!", user, piskaProc)
		default:
			message += fmt.Sprintf("\n<@%s> –ø–∏—Å—å–∫–∞ –Ω–∞ %d%%, –Ω–æ –Ω—É–∂–Ω–æ –µ—â–µ –≤—ã—Ä–∞—Å—Ç–∏", user, piskaProc)
		}
	}
	return message
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–µ–Ω–∏—Å
func penisCommand(s *discordgo.Session, m *discordgo.MessageCreate) string {
	size := rand.IntN(30) + 1
	shaft := strings.Repeat("=", size)
	penis := fmt.Sprintf("8%s>", shaft)

	var message string
	switch size {
	case 1:
		message = "–û–±–ª–∞–¥–∞—Ç–µ–ª—å –º–∏–∫—Ä–æ—Å–∫–æ–ø–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç—Ä—É—á–∫–∞! –ù–µ –≥—Ä—É—Å—Ç–∏, –±—Ä–æ, –∑–∞—Ç–æ —Ç—ã –∫–æ—Ä–æ–ª—å –∫–ª–∏—Ç–æ—Ä–∞!"
	case 30:
		message = "–°–≤—è—Ç—ã–µ —É–≥–æ–¥–Ω–∏–∫–∏! –£ —Ç–µ–±—è —Ç–∞–º –±–∞–æ–±–∞–± –≤—ã—Ä–æ—Å? –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ç–µ–ø–µ—Ä—å —Ç—ã –≥–ª–∞–≤–Ω—ã–π –∫–∞–ª–∏–±—Ä —ç—Å–∫–∞–¥—Ä—ã!"
	default:
		message = fmt.Sprintf("–†–∞–∑–º–µ—Ä: %d —Å–º", size)
	}

	return fmt.Sprintf("```\n%s\n```\n%s", penis, message)
}

func gayMessage(s *discordgo.Session, m *discordgo.MessageCreate, user string) {
	var message strings.Builder
	message.WriteString("\U0001F3F3\U0000FE0F\u200D\U0001F308\U0001F308\U0001F3F3\U0000FE0F\n")

	gayProc := rand.IntN(101)
	var result string

	switch {
	case gayProc == 0:
		result = fmt.Sprintf("<@%s>, —É —Ç–µ–±—è –ø–æ–∫–∞ 0%% GaY—Å—Ç–≤–∞. –ù–µ —Å–¥–∞–≤–∞–π—Å—è! ü•∫", user)
	case gayProc == 100:
		message.WriteString(strings.Repeat("üåà", 15))
		result = fmt.Sprintf("<@%s>, —Ç—ã –ø—Ä–æ—Å—Ç–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ! 400%% GaY—Å—Ç–≤–∞! %s", user, strings.Join([]string{"üåà", "‚ú®", "ü¶Ñ", "üíñ", "üåü"}, " "))
	case gayProc >= 50:
		message.WriteString(strings.Repeat("üåà", 10))
		result = fmt.Sprintf("<@%s>, —É —Ç–µ–±—è %d%% –≥–µ–π—Å—Ç–≤–∞! –î–µ—Ä–∂–∏—Å—å, —Ä–∞–¥—É–∂–Ω—ã–π –≤–æ–∏–Ω! üíÉ‚ú®", user, gayProc)
	default:
		message.WriteString(strings.Repeat("üåà", 5))
		result = fmt.Sprintf("<@%s>, —É —Ç–µ–±—è %d%% –≥–µ–π—Å—Ç–≤–∞. –ü–æ–ø—Ä–æ–±—É–π —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å –ø–æ–¥ Lady Gaga! üíÉüé∂", user, gayProc)
	}

	message.WriteString(result + "\n")

	message.WriteString(strings.Repeat("\U0001F308", 10) + "\n" + "\U0001F3F3\U0000FE0F\u200D\U0001F308\U0001F308\U0001F3F3\U0000FE0F")

	s.ChannelMessageSend(m.ChannelID, message.String())

	for _, emoji := range rainbowEmojis {
		time.Sleep(200 * time.Millisecond)
		s.MessageReactionAdd(m.ChannelID, m.ID, emoji)
	}

	if gayProc >= 50 {
		animatedMessage := "üåà "
		for i := 0; i < 5; i++ {
			animatedMessage += strings.Repeat("üåà", i+1)
			_, err := s.ChannelMessageSend(m.ChannelID, animatedMessage)
			if err != nil {
				fmt.Println("error sending animated message:", err)
			}
			time.Sleep(300 * time.Millisecond)
		}
	}
}

func main() {

	session, err := discordgo.New("Bot " + Token)
	if err != nil {
		fmt.Println("Error creating Discord session:", err)
		return
	}

	quote := quotes.New()

	session.Identify.Intents = discordgo.IntentsGuildMessages

	session.AddHandler(func(s *discordgo.Session, m *discordgo.MessageCreate) {
		if m.Author.ID == s.State.User.ID {
			return
		}
		morning := false
		for _, v := range morningMessages {
			if strings.Contains(strings.ToLower(m.Content), v) {
				morning = true
			}
		}

		spoki := false
		for _, v := range spokiMessages {
			if strings.Contains(strings.ToLower(m.Content), v) {
				spoki = true
			}
		}

		if strings.HasPrefix(m.Content, "!–≥–æ–Ω–∫–∞") {
			handleRaceCommand(s, m)
		} else if strings.HasPrefix(m.Content, "!–≥–æ") {
			handleJoinRaceCommand(s, m)
		} else if strings.HasPrefix(m.Content, "!–ø–∏–≤–æ") {
			handleBeerCommand(s, m)
		}

		if morning {
			emoji, err := session.GuildEmoji(m.GuildID, "1016631674106294353")
			if err != nil {
				emoji = &discordgo.Emoji{
					Name: "ü´†",
				}
			}
			err = session.MessageReactionAdd(m.ChannelID, m.ID, emoji.APIName())
			if err != nil {
				fmt.Println("error reacting to message,", err)
			}
		}

		if spoki {
			emoji, err := session.GuildEmoji(m.GuildID, "1016631826338566144")
			if err != nil {
				emoji = &discordgo.Emoji{
					Name: "üò¥",
				}
			}
			err = session.MessageReactionAdd(m.ChannelID, m.ID, emoji.APIName())
			if err != nil {
				fmt.Println("error reacting to message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "–ª–µ–≥–∏–æ–Ω") {
			for _, v := range legionEmojis {
				err := s.MessageReactionAdd(m.ChannelID, m.ID, v)
				time.Sleep(100 * time.Millisecond)
				if err != nil {
					fmt.Println("error reacting to message,", err)
				}
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "–∫–æ–≤–µ–Ω") || strings.Contains(strings.ToLower(m.Content), "—Å–µ—Å—Ç—Ä—ã") || strings.Contains(strings.ToLower(m.Content), "—Å—ë—Å—Ç—Ä—ã") {
			for _, v := range covenEmojis {
				err := s.MessageReactionAdd(m.ChannelID, m.ID, v)
				time.Sleep(100 * time.Millisecond)
				if err != nil {
					fmt.Println("error reacting to message,", err)
				}
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "—Å–ø–∞—Å–∏–±–æ") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–≠—Ç–æ —Ç–µ–±–µ —Å–ø–∞—Å–∏–±–æ! üòéüòéüòé", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "–±–æ–±—Ä") || strings.Contains(strings.ToLower(m.Content), "–±–æ–±–µ—Ä") || strings.Contains(strings.ToLower(m.Content), "–∫—É—Ä–≤–∞") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "Kurwa b√≥br. Ja pierdolƒô, Jakie bydlƒô jebane ü¶´ü¶´ü¶´", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "–ø—Ä–∏–≤–µ—Ç") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–ü—Ä–∏–≤–µ—Ç!", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "–ø–∏—Ñ") && strings.ContainsAny(strings.ToLower(m.Content), "–ø–∞—Ñ") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–ü–∏—Ñ-–ø–∞—Ñ!üî´üî´üî´", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		} else if strings.Contains(strings.ToLower(m.Content), "pif") && strings.ContainsAny(strings.ToLower(m.Content), "paf") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "Pif-paf!üî´üî´üî´", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "–∞–ª–∫–∞—à") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–≠–π –º–∞–ª—å—á–∏–∫, –¥–∞–≤–∞–π –æ–±–º–µ–Ω,—è –∂–µ –≤–∏–∂—É —á—Ç–æ —Ç—ã –∞–ª–∫–∞—à (c) –ß–∞–π–æ–∫", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "–¥–µ–¥ –∏–Ω—Å–∞–π–¥") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–ì–ª–∏—Å—Ç—ã –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ –ø–æ–º–µ—Ä–ª–∏?", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "—è –≥–µ–π") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–Ø —Ç–æ–∂–µ!", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "—è –ª–µ—Å–±–∏—è–Ω–∫–∞") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–Ø —Ç–æ–∂–µ!", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "—è –±–∏") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–Ø —Ç–æ–∂–µ!", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "—è –Ω–∞—Ç—É—Ä–∞–ª") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–Ø –∏–Ω–æ–≥–¥–∞ —Ç–æ–∂–µ!", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–î–µ–Ω—å —Ç—è–∂–µ–ª—ã–π üòµ‚Äçüí´", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		for _, v := range sickMessages {
			if strings.Contains(strings.ToLower(m.Content), v) {
				_, err := s.ChannelMessageSendReply(m.ChannelID, "–°–∫–æ—Ä–µ–µ –≤—ã–∑–¥–æ—Ä–∞–≤–ª–∏–≤–∞–π –∏ –±–æ–ª—å—à–µ –Ω–µ –±–æ–ª–µ–π! üòç", m.Reference())
				if err != nil {
					fmt.Println("error sending message,", err)
				}
			}
		}

		for _, v := range phasmaMessages {
			if strings.Contains(strings.ToLower(m.Content), v) {
				err := s.MessageReactionAdd(m.ChannelID, m.ID, "üëª")
				if err != nil {
					fmt.Println("error reacting to message,", err)
				}
			}
		}

		if strings.HasPrefix(strings.ToLower(m.Content), "!–ø–µ–Ω–∏—Å") {
			user := m.Author.ID
			if len(m.Mentions) != 0 {
				member, err := s.GuildMember(m.GuildID, m.Mentions[0].ID)
				if err == nil {
					user = member.User.ID
				}
			}

			response := penisCommand(s, m)
			_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("<@%s>\n%s", user, response), m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "–ø–æ–ª—á–∞—Å–∞") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–ø–æ–ª—á–∞—Å–∞, –ø–æ–ª—á–∞—Å–∞ - –Ω–µ –≤–æ–ø—Ä–æ—Å. –ù–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—á–∞—Å–∞, –ø–æ–ª—á–∞—Å–∞ (c) –ß–∞–π–æ–∫", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "–∫–µ—Ä–∞–º–∏–∫–∞") {
			customEmoji := "<:PotFriend:1271815662695743590>"
			response := fmt.Sprintf("–≤–Ω–µ–∑–∞–ø–Ω–∞—è %s –ø–µ—Ä–µ–∫–ª–∏—á–∫–∞ %s –µ–±—É—á–∏—Ö %s –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∏—Ö %s –∏–∑–¥–µ–ª–∏–π %s –≤–Ω–µ–∑–∞–ø–Ω–∞—è %s –ø–µ—Ä–µ–∫–ª–∏—á–∫–∞ %s –µ–±—É—á–∏—Ö %s –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∏—Ö %s –∏–∑–¥–µ–ª–∏–π %s",
				customEmoji, customEmoji, customEmoji, customEmoji, customEmoji,
				customEmoji, customEmoji, customEmoji, customEmoji, customEmoji)
			_, err := s.ChannelMessageSendReply(m.ChannelID, response, m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "!–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ") {
			go poll(s, m)
		}

		if strings.Contains(strings.ToLower(m.Content), "!quote") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, quote.GetRandom(), m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "!academia") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, quote.GetRandomAcademia(), m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.HasPrefix(strings.ToLower(m.Content), "!–º–µ–¥–≤–µ–¥—å") {
			user := m.Author.ID
			if len(m.Mentions) != 0 {
				//#nosec G404 -- This is a false positive
				if rand.IntN(10) == 0 {
					_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("<@%s>, –∫–∞–∂–µ—Ç—Å—è –º–µ–¥–≤–µ–¥—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∑–∞–≤–∞–ª–∏—Ç —Ç–µ–±—è üêªüêªüêª", user), m.Reference())
					if err != nil {
						fmt.Println("error sending message,", err)
					}
					return
				}
				member, err := s.GuildMember(m.GuildID, m.Mentions[0].ID)
				if err == nil {
					user = member.User.ID
				}
			}

			//#nosec G404 -- This is a false positive
			medvedProc := rand.IntN(101)
			_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("<@%s>, –∑–∞–≤–∞–ª–∏—à—å –º–µ–¥–≤–µ–¥—è —Å %d%% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é üêª", user, medvedProc), m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.HasPrefix(strings.ToLower(m.Content), "!—Ä–æ–ª–ª") || strings.HasPrefix(strings.ToLower(m.Content), "!d20") {
			user := m.Author.ID
			//#nosec G404 -- This is a false positive
			roll := rand.IntN(20) + 1
			_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("<@%s>, —Ç—ã –≤—ã–∫–∏–Ω—É–ª %d", user, roll), m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.HasPrefix(strings.ToLower(m.Content), "!–ø–∏—Å—å–∫–∞") {
			user := m.Author.ID
			if len(m.Mentions) != 0 {
				//#nosec G404 -- This is a false positive
				if rand.IntN(10) == 0 {
					_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("<@%s>, –∞ –≤–æ—Ç –∏ –Ω–µ—Ç, –ø–∏—Å—å–∫–∞ —ç—Ç–æ —Ç—ã!!!", user), m.Reference())
					if err != nil {
						fmt.Println("error sending message,", err)
					}
					return
				}
				member, err := s.GuildMember(m.GuildID, m.Mentions[0].ID)
				if err == nil {
					user = member.User.ID
				}
			}

			//#nosec G404 -- This is a false positive
			piskaProc := rand.IntN(101)

			if piskaProc == 100 {
				_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("<@%s>, —Ç—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–∏—Å—å–∫–∞ –Ω–∞ –í–°–ï 100%%", user), m.Reference())
				if err != nil {
					fmt.Println("error sending message,", err)
				}
				return
			}

			if piskaProc == 0 {
				_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("–ò–∑–≤–∏–Ω–∏, <@%s>, –Ω–æ —Ç—ã —Å–æ–≤—Å–µ–º –Ω–µ –ø–∏—Å—å–∫–∞ (0%%), –ø—Ä–∏—Ö–æ–¥–∏ –∫–æ–≥–¥–∞ –æ–ø–∏—Å—é–Ω–µ–µ—à—å", user), m.Reference())
				if err != nil {
					fmt.Println("error sending message,", err)
				}
				return
			}

			//#nosec G404 -- This is a false positive
			if rand.IntN(2) == 0 && piskaProc > 50 {
				//#nosec G404 -- This is a false positive
				_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("<@%s> –Ω–∞—Å—Ç–æ—è—â–∞—è –ø–∏—Å—å–∫–∞ –Ω–∞ %d%%, –≤–æ—Ç —Ç–µ–±–µ —Ü–∏—Ç–∞—Ç–∞: %s", user, piskaProc, quotesPublic[rand.IntN(len(quotesPublic))]), m.Reference())
				if err != nil {
					fmt.Println("error sending message,", err)
				}
				return
			}

			if piskaProc > 50 {
				_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("<@%s> –ø–∏—Å—å–∫–∞ –Ω–∞ %d%%, –º–æ–ª–æ–¥–µ—Ü, —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!", user, piskaProc), m.Reference())
				if err != nil {
					fmt.Println("error sending message,", err)
				}
				return
			}

			//#nosec G404 -- This is a false positive
			_, err = s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("<@%s> –ø–∏—Å—å–∫–∞ –Ω–∞ %d%%, –Ω–æ –Ω—É–∂–Ω–æ –µ—â–µ –≤—ã—Ä–∞—Å—Ç–∏!", user, piskaProc), m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.HasPrefix(strings.ToLower(m.Content), "!–≥–µ–π") {
			var userID string

			if len(m.Mentions) > 0 {
				userID = m.Mentions[0].ID
			} else {
				_, err := s.ChannelMessageSend(m.ChannelID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–ø–æ–º—è–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–π—Å—Ç–≤–∞!")
				if err != nil {
					fmt.Println("error sending message:", err)
				}
				return
			}

			if rand.IntN(10) == 0 {
				userID = m.Author.ID
				_, err := s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("<@%s>, –∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç—ã, –º–æ—è –≥–æ–ª—É–±–∞—è –ª—É–Ω–∞???!!!", userID))
				if err != nil {
					fmt.Println("error sending message:", err)
				}
			}

			gayMessage(s, m, userID)
		}

		if strings.HasPrefix(strings.ToLower(m.Content), "!–ø–∏—Å—å–∫–∏") {
			user := m.Author.ID
			users := make([]string, 0)
			if len(m.Mentions) != 0 {
				// nosec G404 -- This is a false positive
				if rand.IntN(10) == 0 {
					_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("<@%s>, –∞ –≤–æ—Ç –∏ –Ω–µ—Ç, –ø–∏—Å—å–∫–∞ —ç—Ç–æ —Ç—ã!!!", user), m.Reference())
					if err != nil {
						fmt.Println("error sending message,", err)
					}
					return
				}
				for _, mention := range m.Mentions {
					member, err := s.GuildMember(m.GuildID, mention.ID)
					if err == nil {
						users = append(users, member.User.ID)
					}
				}
			}

			_, err := s.ChannelMessageSendReply(m.ChannelID, piskaMessage(users), m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
			return

		}

		if strings.HasPrefix(strings.ToLower(m.Content), "!–∞–Ω–µ–∫–¥–æ—Ç") {
			joke, err := jokes.GetJoke()
			if err != nil {
				fmt.Println("error getting joke,", err)
				return
			}
			_, err = s.ChannelMessageSendReply(m.ChannelID, joke, m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		for _, v := range potterMessages {
			if strings.Contains(strings.ToLower(m.Content), v) {
				err := s.MessageReactionAdd(m.ChannelID, m.ID, "üßô")
				if err != nil {
					fmt.Println("error reacting message,", err)
				}
			}
		}

		for _, v := range valorantMessages {
			if strings.Contains(strings.ToLower(m.Content), v) {
				err := s.MessageReactionAdd(m.ChannelID, m.ID, "üî•")
				if err != nil {
					fmt.Println("error reacting message,", err)
				}
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "—è –ø–∏—Å—é–Ω") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–Ø —Ç–æ–∂–µ –ø–∏—Å—é–Ω!!!", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "—è –ø–∏—Å—å–∫–∞") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–Ø —Ç–æ–∂–µ –ø–∏—Å—å–∫–∞!!!", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.HasPrefix(strings.ToLower(m.Content), "!—à–∞—Ä") {
			//#nosec G404 -- This is a false positive
			_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("–ú–æ–π –æ—Ç–≤–µ—Ç: %s", magicBallMessages[rand.IntN(len(magicBallMessages))]), m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "–¥–µ–º–æ–Ω") {
			err := s.MessageReactionAdd(m.ChannelID, m.ID, "üëπ")
			if err != nil {
				fmt.Println("error reacting message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "–∫–ª–æ—É–Ω") {
			err := s.MessageReactionAdd(m.ChannelID, m.ID, "ü§°")
			if err != nil {
				fmt.Println("error reacting message,", err)
			}
		}

	})

	err = session.Open()
	if err != nil {
		fmt.Println("error opening connection,", err)
		return
	}

	fmt.Println("Bot is now running.  Press CTRL-C to exit.")
	<-make(chan struct{})

}
